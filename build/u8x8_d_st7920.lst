ARM GAS  /var/folders/rk/zpr83dd14lx588t7kb0yv2b40000gn/T//ccCoQWx7.s 			page 1


   1              		.cpu cortex-m3
   2              		.eabi_attribute 20, 1
   3              		.eabi_attribute 21, 1
   4              		.eabi_attribute 23, 3
   5              		.eabi_attribute 24, 1
   6              		.eabi_attribute 25, 1
   7              		.eabi_attribute 26, 1
   8              		.eabi_attribute 30, 1
   9              		.eabi_attribute 34, 1
  10              		.eabi_attribute 18, 4
  11              		.file	"u8x8_d_st7920.c"
  12              		.text
  13              	.Ltext0:
  14              		.cfi_sections	.debug_frame
  15              		.section	.text.u8x8_d_st7920_common,"ax",%progbits
  16              		.align	1
  17              		.global	u8x8_d_st7920_common
  18              		.syntax unified
  19              		.thumb
  20              		.thumb_func
  21              		.fpu softvfp
  23              	u8x8_d_st7920_common:
  24              	.LFB0:
  25              		.file 1 "u8g2/csrc/u8x8_d_st7920.c"
   1:u8g2/csrc/u8x8_d_st7920.c **** /*
   2:u8g2/csrc/u8x8_d_st7920.c **** 
   3:u8g2/csrc/u8x8_d_st7920.c ****   u8x8_d_st7920.c
   4:u8g2/csrc/u8x8_d_st7920.c ****   
   5:u8g2/csrc/u8x8_d_st7920.c ****   Universal 8bit Graphics Library (https://github.com/olikraus/u8g2/)
   6:u8g2/csrc/u8x8_d_st7920.c **** 
   7:u8g2/csrc/u8x8_d_st7920.c ****   Copyright (c) 2016, olikraus@gmail.com
   8:u8g2/csrc/u8x8_d_st7920.c ****   All rights reserved.
   9:u8g2/csrc/u8x8_d_st7920.c **** 
  10:u8g2/csrc/u8x8_d_st7920.c ****   Redistribution and use in source and binary forms, with or without modification, 
  11:u8g2/csrc/u8x8_d_st7920.c ****   are permitted provided that the following conditions are met:
  12:u8g2/csrc/u8x8_d_st7920.c **** 
  13:u8g2/csrc/u8x8_d_st7920.c ****   * Redistributions of source code must retain the above copyright notice, this list 
  14:u8g2/csrc/u8x8_d_st7920.c ****     of conditions and the following disclaimer.
  15:u8g2/csrc/u8x8_d_st7920.c ****     
  16:u8g2/csrc/u8x8_d_st7920.c ****   * Redistributions in binary form must reproduce the above copyright notice, this 
  17:u8g2/csrc/u8x8_d_st7920.c ****     list of conditions and the following disclaimer in the documentation and/or other 
  18:u8g2/csrc/u8x8_d_st7920.c ****     materials provided with the distribution.
  19:u8g2/csrc/u8x8_d_st7920.c **** 
  20:u8g2/csrc/u8x8_d_st7920.c ****   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND 
  21:u8g2/csrc/u8x8_d_st7920.c ****   CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, 
  22:u8g2/csrc/u8x8_d_st7920.c ****   INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF 
  23:u8g2/csrc/u8x8_d_st7920.c ****   MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE 
  24:u8g2/csrc/u8x8_d_st7920.c ****   DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR 
  25:u8g2/csrc/u8x8_d_st7920.c ****   CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, 
  26:u8g2/csrc/u8x8_d_st7920.c ****   SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT 
  27:u8g2/csrc/u8x8_d_st7920.c ****   NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; 
  28:u8g2/csrc/u8x8_d_st7920.c ****   LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER 
  29:u8g2/csrc/u8x8_d_st7920.c ****   CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, 
  30:u8g2/csrc/u8x8_d_st7920.c ****   STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) 
  31:u8g2/csrc/u8x8_d_st7920.c ****   ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF 
  32:u8g2/csrc/u8x8_d_st7920.c ****   ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.  
  33:u8g2/csrc/u8x8_d_st7920.c **** 
ARM GAS  /var/folders/rk/zpr83dd14lx588t7kb0yv2b40000gn/T//ccCoQWx7.s 			page 2


  34:u8g2/csrc/u8x8_d_st7920.c **** 
  35:u8g2/csrc/u8x8_d_st7920.c ****   The ST7920 controller does not support hardware graphics flip.
  36:u8g2/csrc/u8x8_d_st7920.c ****   Contrast adjustment is done by an external resistor --> no support for contrast adjustment
  37:u8g2/csrc/u8x8_d_st7920.c ****   
  38:u8g2/csrc/u8x8_d_st7920.c ****   
  39:u8g2/csrc/u8x8_d_st7920.c **** */
  40:u8g2/csrc/u8x8_d_st7920.c **** #include "u8x8.h"
  41:u8g2/csrc/u8x8_d_st7920.c **** 
  42:u8g2/csrc/u8x8_d_st7920.c **** 
  43:u8g2/csrc/u8x8_d_st7920.c **** 
  44:u8g2/csrc/u8x8_d_st7920.c **** static const uint8_t u8x8_d_st7920_init_seq[] = {
  45:u8g2/csrc/u8x8_d_st7920.c ****     
  46:u8g2/csrc/u8x8_d_st7920.c ****   U8X8_DLY(100),
  47:u8g2/csrc/u8x8_d_st7920.c ****   U8X8_START_TRANSFER(),             	/* enable chip, delay is part of the transfer start */
  48:u8g2/csrc/u8x8_d_st7920.c ****   U8X8_DLY(10),
  49:u8g2/csrc/u8x8_d_st7920.c ****   
  50:u8g2/csrc/u8x8_d_st7920.c ****   U8X8_C(0x038),            			/* 8 Bit interface (DL=1), basic instruction set (RE=0) */
  51:u8g2/csrc/u8x8_d_st7920.c ****   U8X8_C(0x008),		                /* display on, cursor & blink off; 0x08: all off */
  52:u8g2/csrc/u8x8_d_st7920.c ****   U8X8_C(0x006),		                /* Entry mode: Cursor move to right ,DDRAM address counter (AC) p
  53:u8g2/csrc/u8x8_d_st7920.c ****   U8X8_C(0x002),		                /* disable scroll, enable CGRAM adress  */
  54:u8g2/csrc/u8x8_d_st7920.c ****   U8X8_C(0x001),		                /* clear RAM, needs 1.6 ms */
  55:u8g2/csrc/u8x8_d_st7920.c ****   U8X8_DLY(4),					/* delay 2ms */
  56:u8g2/csrc/u8x8_d_st7920.c **** 
  57:u8g2/csrc/u8x8_d_st7920.c ****   
  58:u8g2/csrc/u8x8_d_st7920.c ****   U8X8_END_TRANSFER(),             	/* disable chip */
  59:u8g2/csrc/u8x8_d_st7920.c ****   U8X8_END()             			/* end of sequence */
  60:u8g2/csrc/u8x8_d_st7920.c **** };
  61:u8g2/csrc/u8x8_d_st7920.c **** 
  62:u8g2/csrc/u8x8_d_st7920.c **** static const uint8_t u8x8_d_st7920_powersave0_seq[] = {
  63:u8g2/csrc/u8x8_d_st7920.c ****   U8X8_START_TRANSFER(),             	/* enable chip, delay is part of the transfer start */
  64:u8g2/csrc/u8x8_d_st7920.c ****   U8X8_C(0x038),            			/* 8 Bit interface (DL=1), basic instruction set (RE=0) */
  65:u8g2/csrc/u8x8_d_st7920.c ****   U8X8_C(0x00c),		                /* display on, cursor & blink off */
  66:u8g2/csrc/u8x8_d_st7920.c ****   U8X8_END_TRANSFER(),             	/* disable chip */
  67:u8g2/csrc/u8x8_d_st7920.c ****   U8X8_END()             			/* end of sequence */
  68:u8g2/csrc/u8x8_d_st7920.c **** };
  69:u8g2/csrc/u8x8_d_st7920.c **** 
  70:u8g2/csrc/u8x8_d_st7920.c **** static const uint8_t u8x8_d_st7920_powersave1_seq[] = {
  71:u8g2/csrc/u8x8_d_st7920.c ****   U8X8_START_TRANSFER(),             	/* enable chip, delay is part of the transfer start */
  72:u8g2/csrc/u8x8_d_st7920.c ****   U8X8_C(0x038),            			/* 8 Bit interface (DL=1), basic instruction set (RE=0) */
  73:u8g2/csrc/u8x8_d_st7920.c ****   U8X8_C(0x008),		                /* display off */
  74:u8g2/csrc/u8x8_d_st7920.c ****   U8X8_END_TRANSFER(),             	/* disable chip */
  75:u8g2/csrc/u8x8_d_st7920.c ****   U8X8_END()             			/* end of sequence */
  76:u8g2/csrc/u8x8_d_st7920.c **** };
  77:u8g2/csrc/u8x8_d_st7920.c **** 
  78:u8g2/csrc/u8x8_d_st7920.c **** 
  79:u8g2/csrc/u8x8_d_st7920.c **** uint8_t u8x8_d_st7920_common(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
  80:u8g2/csrc/u8x8_d_st7920.c **** {
  26              		.loc 1 80 0
  27              		.cfi_startproc
  28              		@ args = 0, pretend = 0, frame = 0
  29              		@ frame_needed = 0, uses_anonymous_args = 0
  30              	.LVL0:
  31 0000 2DE9F047 		push	{r4, r5, r6, r7, r8, r9, r10, lr}
  32              	.LCFI0:
  33              		.cfi_def_cfa_offset 32
  34              		.cfi_offset 4, -32
  35              		.cfi_offset 5, -28
ARM GAS  /var/folders/rk/zpr83dd14lx588t7kb0yv2b40000gn/T//ccCoQWx7.s 			page 3


  36              		.cfi_offset 6, -24
  37              		.cfi_offset 7, -20
  38              		.cfi_offset 8, -16
  39              		.cfi_offset 9, -12
  40              		.cfi_offset 10, -8
  41              		.cfi_offset 14, -4
  42 0004 0546     		mov	r5, r0
  81:u8g2/csrc/u8x8_d_st7920.c ****   uint8_t x, y, c, i;
  82:u8g2/csrc/u8x8_d_st7920.c ****   uint8_t *ptr;
  83:u8g2/csrc/u8x8_d_st7920.c ****   switch(msg)
  43              		.loc 1 83 0
  44 0006 0B29     		cmp	r1, #11
  45 0008 0FD0     		beq	.L3
  46 000a 9846     		mov	r8, r3
  47 000c 0F29     		cmp	r1, #15
  48 000e 17D0     		beq	.L4
  49 0010 0A29     		cmp	r1, #10
  50 0012 01D0     		beq	.L13
  84:u8g2/csrc/u8x8_d_st7920.c ****   {
  85:u8g2/csrc/u8x8_d_st7920.c ****     /* U8X8_MSG_DISPLAY_SETUP_MEMORY is handled by the calling function */
  86:u8g2/csrc/u8x8_d_st7920.c ****     /*
  87:u8g2/csrc/u8x8_d_st7920.c ****     case U8X8_MSG_DISPLAY_SETUP_MEMORY:
  88:u8g2/csrc/u8x8_d_st7920.c ****       break;
  89:u8g2/csrc/u8x8_d_st7920.c ****     */
  90:u8g2/csrc/u8x8_d_st7920.c ****     case U8X8_MSG_DISPLAY_INIT:
  91:u8g2/csrc/u8x8_d_st7920.c ****       u8x8_d_helper_display_init(u8x8);
  92:u8g2/csrc/u8x8_d_st7920.c ****       u8x8_cad_SendSequence(u8x8, u8x8_d_st7920_init_seq);
  93:u8g2/csrc/u8x8_d_st7920.c ****       break;
  94:u8g2/csrc/u8x8_d_st7920.c ****     case U8X8_MSG_DISPLAY_SET_POWER_SAVE:
  95:u8g2/csrc/u8x8_d_st7920.c ****       if ( arg_int == 0 )
  96:u8g2/csrc/u8x8_d_st7920.c **** 	u8x8_cad_SendSequence(u8x8, u8x8_d_st7920_powersave0_seq);
  97:u8g2/csrc/u8x8_d_st7920.c ****       else
  98:u8g2/csrc/u8x8_d_st7920.c **** 	u8x8_cad_SendSequence(u8x8, u8x8_d_st7920_powersave1_seq);
  99:u8g2/csrc/u8x8_d_st7920.c ****       break;
 100:u8g2/csrc/u8x8_d_st7920.c ****     case U8X8_MSG_DISPLAY_DRAW_TILE:
 101:u8g2/csrc/u8x8_d_st7920.c ****       y = (((u8x8_tile_t *)arg_ptr)->y_pos);
 102:u8g2/csrc/u8x8_d_st7920.c ****       y*=8;
 103:u8g2/csrc/u8x8_d_st7920.c ****       x = ((u8x8_tile_t *)arg_ptr)->x_pos;
 104:u8g2/csrc/u8x8_d_st7920.c ****       x /= 2;		/* not sure whether this is a clever idea, problem is, the ST7920 can address only e
 105:u8g2/csrc/u8x8_d_st7920.c ****     
 106:u8g2/csrc/u8x8_d_st7920.c ****       if ( y >= 32 )	/* this is the adjustment for 128x64 displays */
 107:u8g2/csrc/u8x8_d_st7920.c ****       {
 108:u8g2/csrc/u8x8_d_st7920.c **** 	y-=32;
 109:u8g2/csrc/u8x8_d_st7920.c **** 	x+=8;
 110:u8g2/csrc/u8x8_d_st7920.c ****       }
 111:u8g2/csrc/u8x8_d_st7920.c ****     
 112:u8g2/csrc/u8x8_d_st7920.c ****       u8x8_cad_StartTransfer(u8x8);
 113:u8g2/csrc/u8x8_d_st7920.c ****         
 114:u8g2/csrc/u8x8_d_st7920.c **** 
 115:u8g2/csrc/u8x8_d_st7920.c ****       /* 
 116:u8g2/csrc/u8x8_d_st7920.c **** 	Tile structure is reused here for the ST7920, however u8x8 is not supported 
 117:u8g2/csrc/u8x8_d_st7920.c **** 	tile_ptr points to data which has cnt*8 bytes (same as SSD1306 tiles)
 118:u8g2/csrc/u8x8_d_st7920.c **** 	Buffer is expected to have 8 lines of code fitting to the ST7920 internal memory
 119:u8g2/csrc/u8x8_d_st7920.c **** 	"cnt" includes the number of horizontal bytes. width is equal to cnt*8
 120:u8g2/csrc/u8x8_d_st7920.c **** 	Also important: Width must be a multiple of 16 (ST7920 requirement), so cnt must be even.
 121:u8g2/csrc/u8x8_d_st7920.c **** 	
 122:u8g2/csrc/u8x8_d_st7920.c **** 	TODO: Consider arg_int, however arg_int is not used by u8g2
ARM GAS  /var/folders/rk/zpr83dd14lx588t7kb0yv2b40000gn/T//ccCoQWx7.s 			page 4


 123:u8g2/csrc/u8x8_d_st7920.c ****       */
 124:u8g2/csrc/u8x8_d_st7920.c ****       c = ((u8x8_tile_t *)arg_ptr)->cnt;	/* number of tiles */
 125:u8g2/csrc/u8x8_d_st7920.c ****       ptr = ((u8x8_tile_t *)arg_ptr)->tile_ptr;	/* data ptr to the tiles */
 126:u8g2/csrc/u8x8_d_st7920.c ****       /* The following byte is sent to allow the ST7920 to sync up with the data */
 127:u8g2/csrc/u8x8_d_st7920.c ****       /* it solves some issues with garbage data */
 128:u8g2/csrc/u8x8_d_st7920.c ****       u8x8_cad_SendCmd(u8x8, 0x03e );	/* enable extended mode */
 129:u8g2/csrc/u8x8_d_st7920.c ****       for( i = 0; i < 8; i++ )
 130:u8g2/csrc/u8x8_d_st7920.c ****       {
 131:u8g2/csrc/u8x8_d_st7920.c **** 	//u8x8_cad_SendCmd(u8x8, 0x03e );	/* enable extended mode */
 132:u8g2/csrc/u8x8_d_st7920.c **** 	u8x8_cad_SendCmd(u8x8, 0x080 | (y+i) );      /* y pos  */
 133:u8g2/csrc/u8x8_d_st7920.c **** 	u8x8_cad_SendCmd(u8x8, 0x080 | x );      /* set x pos */
 134:u8g2/csrc/u8x8_d_st7920.c **** 	c = ((u8x8_tile_t *)arg_ptr)->cnt;	/* number of tiles */
 135:u8g2/csrc/u8x8_d_st7920.c **** 
 136:u8g2/csrc/u8x8_d_st7920.c **** 	//u8x8->gpio_and_delay_cb(u8x8, U8X8_MSG_DELAY_NANO, 200, NULL);	/* extra dely required */
 137:u8g2/csrc/u8x8_d_st7920.c **** 	u8x8_cad_SendData(u8x8, c, ptr);	/* note: SendData can not handle more than 255 bytes, send one li
 138:u8g2/csrc/u8x8_d_st7920.c **** 	ptr += c;
 139:u8g2/csrc/u8x8_d_st7920.c **** 	//u8x8->gpio_and_delay_cb(u8x8, U8X8_MSG_DELAY_NANO, 200, NULL);	/* extra dely required */
 140:u8g2/csrc/u8x8_d_st7920.c ****       }
 141:u8g2/csrc/u8x8_d_st7920.c **** 
 142:u8g2/csrc/u8x8_d_st7920.c ****       u8x8_cad_EndTransfer(u8x8);
 143:u8g2/csrc/u8x8_d_st7920.c **** 
 144:u8g2/csrc/u8x8_d_st7920.c ****       break;
 145:u8g2/csrc/u8x8_d_st7920.c ****     default:
 146:u8g2/csrc/u8x8_d_st7920.c ****       return 0;
  51              		.loc 1 146 0
  52 0014 0020     		movs	r0, #0
  53              	.LVL1:
  54 0016 06E0     		b	.L2
  55              	.LVL2:
  56              	.L13:
  91:u8g2/csrc/u8x8_d_st7920.c ****       u8x8_cad_SendSequence(u8x8, u8x8_d_st7920_init_seq);
  57              		.loc 1 91 0
  58 0018 FFF7FEFF 		bl	u8x8_d_helper_display_init
  59              	.LVL3:
  92:u8g2/csrc/u8x8_d_st7920.c ****       break;
  60              		.loc 1 92 0
  61 001c 2349     		ldr	r1, .L14
  62 001e 2846     		mov	r0, r5
  63 0020 FFF7FEFF 		bl	u8x8_cad_SendSequence
  64              	.LVL4:
 147:u8g2/csrc/u8x8_d_st7920.c ****   }
 148:u8g2/csrc/u8x8_d_st7920.c ****   return 1;
  65              		.loc 1 148 0
  66 0024 0120     		movs	r0, #1
  67              	.LVL5:
  68              	.L2:
 149:u8g2/csrc/u8x8_d_st7920.c **** }
  69              		.loc 1 149 0
  70 0026 BDE8F087 		pop	{r4, r5, r6, r7, r8, r9, r10, pc}
  71              	.LVL6:
  72              	.L3:
  95:u8g2/csrc/u8x8_d_st7920.c **** 	u8x8_cad_SendSequence(u8x8, u8x8_d_st7920_powersave0_seq);
  73              		.loc 1 95 0
  74 002a 22B9     		cbnz	r2, .L6
  96:u8g2/csrc/u8x8_d_st7920.c ****       else
  75              		.loc 1 96 0
  76 002c 2049     		ldr	r1, .L14+4
ARM GAS  /var/folders/rk/zpr83dd14lx588t7kb0yv2b40000gn/T//ccCoQWx7.s 			page 5


  77              	.LVL7:
  78 002e FFF7FEFF 		bl	u8x8_cad_SendSequence
  79              	.LVL8:
 148:u8g2/csrc/u8x8_d_st7920.c **** }
  80              		.loc 1 148 0
  81 0032 0120     		movs	r0, #1
  82 0034 F7E7     		b	.L2
  83              	.LVL9:
  84              	.L6:
  98:u8g2/csrc/u8x8_d_st7920.c ****       break;
  85              		.loc 1 98 0
  86 0036 1F49     		ldr	r1, .L14+8
  87              	.LVL10:
  88 0038 FFF7FEFF 		bl	u8x8_cad_SendSequence
  89              	.LVL11:
 148:u8g2/csrc/u8x8_d_st7920.c **** }
  90              		.loc 1 148 0
  91 003c 0120     		movs	r0, #1
  92 003e F2E7     		b	.L2
  93              	.LVL12:
  94              	.L4:
 101:u8g2/csrc/u8x8_d_st7920.c ****       y*=8;
  95              		.loc 1 101 0
  96 0040 9F79     		ldrb	r7, [r3, #6]	@ zero_extendqisi2
  97              	.LVL13:
 102:u8g2/csrc/u8x8_d_st7920.c ****       x = ((u8x8_tile_t *)arg_ptr)->x_pos;
  98              		.loc 1 102 0
  99 0042 FF00     		lsls	r7, r7, #3
 100              	.LVL14:
 101 0044 FFB2     		uxtb	r7, r7
 102              	.LVL15:
 103:u8g2/csrc/u8x8_d_st7920.c ****       x /= 2;		/* not sure whether this is a clever idea, problem is, the ST7920 can address only e
 103              		.loc 1 103 0
 104 0046 93F80590 		ldrb	r9, [r3, #5]	@ zero_extendqisi2
 105              	.LVL16:
 104:u8g2/csrc/u8x8_d_st7920.c ****     
 106              		.loc 1 104 0
 107 004a 4FEA5909 		lsr	r9, r9, #1
 108              	.LVL17:
 106:u8g2/csrc/u8x8_d_st7920.c ****       {
 109              		.loc 1 106 0
 110 004e 1F2F     		cmp	r7, #31
 111 0050 03D9     		bls	.L7
 108:u8g2/csrc/u8x8_d_st7920.c **** 	x+=8;
 112              		.loc 1 108 0
 113 0052 203F     		subs	r7, r7, #32
 114              	.LVL18:
 115 0054 FFB2     		uxtb	r7, r7
 116              	.LVL19:
 109:u8g2/csrc/u8x8_d_st7920.c ****       }
 117              		.loc 1 109 0
 118 0056 09F10809 		add	r9, r9, #8
 119              	.LVL20:
 120              	.L7:
 112:u8g2/csrc/u8x8_d_st7920.c ****         
 121              		.loc 1 112 0
 122 005a 2846     		mov	r0, r5
ARM GAS  /var/folders/rk/zpr83dd14lx588t7kb0yv2b40000gn/T//ccCoQWx7.s 			page 6


 123              	.LVL21:
 124 005c FFF7FEFF 		bl	u8x8_cad_StartTransfer
 125              	.LVL22:
 125:u8g2/csrc/u8x8_d_st7920.c ****       /* The following byte is sent to allow the ST7920 to sync up with the data */
 126              		.loc 1 125 0
 127 0060 D8F80060 		ldr	r6, [r8]
 128              	.LVL23:
 128:u8g2/csrc/u8x8_d_st7920.c ****       for( i = 0; i < 8; i++ )
 129              		.loc 1 128 0
 130 0064 3E21     		movs	r1, #62
 131 0066 2846     		mov	r0, r5
 132 0068 FFF7FEFF 		bl	u8x8_cad_SendCmd
 133              	.LVL24:
 129:u8g2/csrc/u8x8_d_st7920.c ****       {
 134              		.loc 1 129 0
 135 006c 0024     		movs	r4, #0
 136 006e 16E0     		b	.L8
 137              	.LVL25:
 138              	.L9:
 132:u8g2/csrc/u8x8_d_st7920.c **** 	u8x8_cad_SendCmd(u8x8, 0x080 | x );      /* set x pos */
 139              		.loc 1 132 0 discriminator 3
 140 0070 3919     		adds	r1, r7, r4
 141 0072 49B2     		sxtb	r1, r1
 142 0074 61F07F01 		orn	r1, r1, #127
 143 0078 C9B2     		uxtb	r1, r1
 144 007a 2846     		mov	r0, r5
 145 007c FFF7FEFF 		bl	u8x8_cad_SendCmd
 146              	.LVL26:
 133:u8g2/csrc/u8x8_d_st7920.c **** 	c = ((u8x8_tile_t *)arg_ptr)->cnt;	/* number of tiles */
 147              		.loc 1 133 0 discriminator 3
 148 0080 49F08001 		orr	r1, r9, #128
 149 0084 2846     		mov	r0, r5
 150 0086 FFF7FEFF 		bl	u8x8_cad_SendCmd
 151              	.LVL27:
 134:u8g2/csrc/u8x8_d_st7920.c **** 
 152              		.loc 1 134 0 discriminator 3
 153 008a 98F804A0 		ldrb	r10, [r8, #4]	@ zero_extendqisi2
 154              	.LVL28:
 137:u8g2/csrc/u8x8_d_st7920.c **** 	ptr += c;
 155              		.loc 1 137 0 discriminator 3
 156 008e 3246     		mov	r2, r6
 157 0090 5146     		mov	r1, r10
 158 0092 2846     		mov	r0, r5
 159 0094 FFF7FEFF 		bl	u8x8_cad_SendData
 160              	.LVL29:
 138:u8g2/csrc/u8x8_d_st7920.c **** 	//u8x8->gpio_and_delay_cb(u8x8, U8X8_MSG_DELAY_NANO, 200, NULL);	/* extra dely required */
 161              		.loc 1 138 0 discriminator 3
 162 0098 5644     		add	r6, r6, r10
 163              	.LVL30:
 129:u8g2/csrc/u8x8_d_st7920.c ****       {
 164              		.loc 1 129 0 discriminator 3
 165 009a 0134     		adds	r4, r4, #1
 166              	.LVL31:
 167 009c E4B2     		uxtb	r4, r4
 168              	.LVL32:
 169              	.L8:
 129:u8g2/csrc/u8x8_d_st7920.c ****       {
ARM GAS  /var/folders/rk/zpr83dd14lx588t7kb0yv2b40000gn/T//ccCoQWx7.s 			page 7


 170              		.loc 1 129 0 is_stmt 0 discriminator 1
 171 009e 072C     		cmp	r4, #7
 172 00a0 E6D9     		bls	.L9
 142:u8g2/csrc/u8x8_d_st7920.c **** 
 173              		.loc 1 142 0 is_stmt 1
 174 00a2 2846     		mov	r0, r5
 175 00a4 FFF7FEFF 		bl	u8x8_cad_EndTransfer
 176              	.LVL33:
 148:u8g2/csrc/u8x8_d_st7920.c **** }
 177              		.loc 1 148 0
 178 00a8 0120     		movs	r0, #1
 144:u8g2/csrc/u8x8_d_st7920.c ****     default:
 179              		.loc 1 144 0
 180 00aa BCE7     		b	.L2
 181              	.L15:
 182              		.align	2
 183              	.L14:
 184 00ac 00000000 		.word	.LANCHOR0
 185 00b0 00000000 		.word	.LANCHOR1
 186 00b4 00000000 		.word	.LANCHOR2
 187              		.cfi_endproc
 188              	.LFE0:
 190              		.section	.text.u8x8_d_st7920_192x32,"ax",%progbits
 191              		.align	1
 192              		.global	u8x8_d_st7920_192x32
 193              		.syntax unified
 194              		.thumb
 195              		.thumb_func
 196              		.fpu softvfp
 198              	u8x8_d_st7920_192x32:
 199              	.LFB1:
 150:u8g2/csrc/u8x8_d_st7920.c **** 
 151:u8g2/csrc/u8x8_d_st7920.c **** static const u8x8_display_info_t u8x8_st7920_192x32_display_info =
 152:u8g2/csrc/u8x8_d_st7920.c **** {
 153:u8g2/csrc/u8x8_d_st7920.c ****   /* chip_enable_level = */ 1,
 154:u8g2/csrc/u8x8_d_st7920.c ****   /* chip_disable_level = */ 0,
 155:u8g2/csrc/u8x8_d_st7920.c ****   
 156:u8g2/csrc/u8x8_d_st7920.c ****   /* post_chip_enable_wait_ns = */ 5,
 157:u8g2/csrc/u8x8_d_st7920.c ****   /* pre_chip_disable_wait_ns = */ 5,
 158:u8g2/csrc/u8x8_d_st7920.c ****   /* reset_pulse_width_ms = */ 1, 
 159:u8g2/csrc/u8x8_d_st7920.c ****   /* post_reset_wait_ms = */ 6, 
 160:u8g2/csrc/u8x8_d_st7920.c ****   /* sda_setup_time_ns = */ 20,		
 161:u8g2/csrc/u8x8_d_st7920.c ****   /* sck_pulse_width_ns = */  140,	/* datasheet ST7920 */
 162:u8g2/csrc/u8x8_d_st7920.c ****   /* sck_clock_hz = */ 1000000UL,	/* since Arduino 1.6.0, the SPI bus speed in Hz. Should be  10000
 163:u8g2/csrc/u8x8_d_st7920.c ****   /* spi_mode = */ 3,		/* old: sck_takeover_edge, new: active high (bit 1), rising edge (bit 0), 18
 164:u8g2/csrc/u8x8_d_st7920.c **** 	/* Arduino mode 3: aktive low clock, but use rising edge */
 165:u8g2/csrc/u8x8_d_st7920.c ****   /* i2c_bus_clock_100kHz = */ 4,
 166:u8g2/csrc/u8x8_d_st7920.c ****   /* data_setup_time_ns = */ 30,
 167:u8g2/csrc/u8x8_d_st7920.c ****   /* write_pulse_width_ns = */ 40,
 168:u8g2/csrc/u8x8_d_st7920.c ****   /* tile_width = */ 24,
 169:u8g2/csrc/u8x8_d_st7920.c ****   /* tile_hight = */ 4,
 170:u8g2/csrc/u8x8_d_st7920.c ****   /* default_x_offset = */ 0,
 171:u8g2/csrc/u8x8_d_st7920.c ****   /* flipmode_x_offset = */ 0,
 172:u8g2/csrc/u8x8_d_st7920.c ****   /* pixel_width = */ 192,
 173:u8g2/csrc/u8x8_d_st7920.c ****   /* pixel_height = */ 32
 174:u8g2/csrc/u8x8_d_st7920.c **** };
 175:u8g2/csrc/u8x8_d_st7920.c **** 
ARM GAS  /var/folders/rk/zpr83dd14lx588t7kb0yv2b40000gn/T//ccCoQWx7.s 			page 8


 176:u8g2/csrc/u8x8_d_st7920.c **** static const u8x8_display_info_t u8x8_st7920_128x64_display_info =
 177:u8g2/csrc/u8x8_d_st7920.c **** {
 178:u8g2/csrc/u8x8_d_st7920.c ****   /* chip_enable_level = */ 1,
 179:u8g2/csrc/u8x8_d_st7920.c ****   /* chip_disable_level = */ 0,
 180:u8g2/csrc/u8x8_d_st7920.c ****   
 181:u8g2/csrc/u8x8_d_st7920.c ****   /* post_chip_enable_wait_ns = */ 5,
 182:u8g2/csrc/u8x8_d_st7920.c ****   /* pre_chip_disable_wait_ns = */ 5,
 183:u8g2/csrc/u8x8_d_st7920.c ****   /* reset_pulse_width_ms = */ 1, 
 184:u8g2/csrc/u8x8_d_st7920.c ****   /* post_reset_wait_ms = */ 6, 
 185:u8g2/csrc/u8x8_d_st7920.c ****   /* sda_setup_time_ns = */ 20,		
 186:u8g2/csrc/u8x8_d_st7920.c ****   /* sck_pulse_width_ns = */  140,	/* datasheet ST7920 */
 187:u8g2/csrc/u8x8_d_st7920.c ****   /* sck_clock_hz = */ 1000000UL,	/* since Arduino 1.6.0, the SPI bus speed in Hz. Should be  10000
 188:u8g2/csrc/u8x8_d_st7920.c ****   /* ST7920+Due work with 1MHz but not with 2MHz, ST7920+Uno works with 2MHz */
 189:u8g2/csrc/u8x8_d_st7920.c ****   /* spi_mode = */ 3,		/* active high, rising edge, 18 Aug 16: changed from 1 to 3 which works for 
 190:u8g2/csrc/u8x8_d_st7920.c ****   /* in theory mode 3 should be correct  */
 191:u8g2/csrc/u8x8_d_st7920.c ****   /* i2c_bus_clock_100kHz = */ 4,
 192:u8g2/csrc/u8x8_d_st7920.c ****   /* data_setup_time_ns = */ 30,
 193:u8g2/csrc/u8x8_d_st7920.c ****   /* write_pulse_width_ns = */ 40,
 194:u8g2/csrc/u8x8_d_st7920.c ****   /* tile_width = */ 16,
 195:u8g2/csrc/u8x8_d_st7920.c ****   /* tile_hight = */ 8,
 196:u8g2/csrc/u8x8_d_st7920.c ****   /* default_x_offset = */ 0,
 197:u8g2/csrc/u8x8_d_st7920.c ****   /* flipmode_x_offset = */ 0,
 198:u8g2/csrc/u8x8_d_st7920.c ****   /* pixel_width = */ 128,
 199:u8g2/csrc/u8x8_d_st7920.c ****   /* pixel_height = */ 64
 200:u8g2/csrc/u8x8_d_st7920.c **** };
 201:u8g2/csrc/u8x8_d_st7920.c **** 
 202:u8g2/csrc/u8x8_d_st7920.c **** uint8_t u8x8_d_st7920_192x32(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
 203:u8g2/csrc/u8x8_d_st7920.c **** {
 200              		.loc 1 203 0
 201              		.cfi_startproc
 202              		@ args = 0, pretend = 0, frame = 0
 203              		@ frame_needed = 0, uses_anonymous_args = 0
 204              	.LVL34:
 205 0000 08B5     		push	{r3, lr}
 206              	.LCFI1:
 207              		.cfi_def_cfa_offset 8
 208              		.cfi_offset 3, -8
 209              		.cfi_offset 14, -4
 204:u8g2/csrc/u8x8_d_st7920.c ****   switch(msg)
 210              		.loc 1 204 0
 211 0002 0929     		cmp	r1, #9
 212 0004 02D0     		beq	.L22
 205:u8g2/csrc/u8x8_d_st7920.c ****   {
 206:u8g2/csrc/u8x8_d_st7920.c ****     case U8X8_MSG_DISPLAY_SETUP_MEMORY:
 207:u8g2/csrc/u8x8_d_st7920.c ****       u8x8_d_helper_display_setup_memory(u8x8, &u8x8_st7920_192x32_display_info);
 208:u8g2/csrc/u8x8_d_st7920.c ****       break;
 209:u8g2/csrc/u8x8_d_st7920.c ****     default:
 210:u8g2/csrc/u8x8_d_st7920.c ****       return u8x8_d_st7920_common(u8x8, msg, arg_int, arg_ptr);
 213              		.loc 1 210 0
 214 0006 FFF7FEFF 		bl	u8x8_d_st7920_common
 215              	.LVL35:
 216              	.L19:
 211:u8g2/csrc/u8x8_d_st7920.c ****   }
 212:u8g2/csrc/u8x8_d_st7920.c ****   return 1;
 213:u8g2/csrc/u8x8_d_st7920.c **** }
 217              		.loc 1 213 0
 218 000a 08BD     		pop	{r3, pc}
ARM GAS  /var/folders/rk/zpr83dd14lx588t7kb0yv2b40000gn/T//ccCoQWx7.s 			page 9


 219              	.LVL36:
 220              	.L22:
 207:u8g2/csrc/u8x8_d_st7920.c ****       break;
 221              		.loc 1 207 0
 222 000c 0249     		ldr	r1, .L23
 223              	.LVL37:
 224 000e FFF7FEFF 		bl	u8x8_d_helper_display_setup_memory
 225              	.LVL38:
 212:u8g2/csrc/u8x8_d_st7920.c **** }
 226              		.loc 1 212 0
 227 0012 0120     		movs	r0, #1
 228 0014 F9E7     		b	.L19
 229              	.L24:
 230 0016 00BF     		.align	2
 231              	.L23:
 232 0018 00000000 		.word	.LANCHOR3
 233              		.cfi_endproc
 234              	.LFE1:
 236              		.section	.text.u8x8_d_st7920_128x64,"ax",%progbits
 237              		.align	1
 238              		.global	u8x8_d_st7920_128x64
 239              		.syntax unified
 240              		.thumb
 241              		.thumb_func
 242              		.fpu softvfp
 244              	u8x8_d_st7920_128x64:
 245              	.LFB2:
 214:u8g2/csrc/u8x8_d_st7920.c **** 
 215:u8g2/csrc/u8x8_d_st7920.c **** uint8_t u8x8_d_st7920_128x64(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
 216:u8g2/csrc/u8x8_d_st7920.c **** {
 246              		.loc 1 216 0
 247              		.cfi_startproc
 248              		@ args = 0, pretend = 0, frame = 0
 249              		@ frame_needed = 0, uses_anonymous_args = 0
 250              	.LVL39:
 251 0000 08B5     		push	{r3, lr}
 252              	.LCFI2:
 253              		.cfi_def_cfa_offset 8
 254              		.cfi_offset 3, -8
 255              		.cfi_offset 14, -4
 217:u8g2/csrc/u8x8_d_st7920.c ****   switch(msg)
 256              		.loc 1 217 0
 257 0002 0929     		cmp	r1, #9
 258 0004 02D0     		beq	.L31
 218:u8g2/csrc/u8x8_d_st7920.c ****   {
 219:u8g2/csrc/u8x8_d_st7920.c ****     case U8X8_MSG_DISPLAY_SETUP_MEMORY:
 220:u8g2/csrc/u8x8_d_st7920.c ****       u8x8_d_helper_display_setup_memory(u8x8, &u8x8_st7920_128x64_display_info);
 221:u8g2/csrc/u8x8_d_st7920.c ****       break;
 222:u8g2/csrc/u8x8_d_st7920.c ****     default:
 223:u8g2/csrc/u8x8_d_st7920.c ****       return u8x8_d_st7920_common(u8x8, msg, arg_int, arg_ptr);
 259              		.loc 1 223 0
 260 0006 FFF7FEFF 		bl	u8x8_d_st7920_common
 261              	.LVL40:
 262              	.L28:
 224:u8g2/csrc/u8x8_d_st7920.c ****   }
 225:u8g2/csrc/u8x8_d_st7920.c ****   return 1;
 226:u8g2/csrc/u8x8_d_st7920.c **** }
ARM GAS  /var/folders/rk/zpr83dd14lx588t7kb0yv2b40000gn/T//ccCoQWx7.s 			page 10


 263              		.loc 1 226 0
 264 000a 08BD     		pop	{r3, pc}
 265              	.LVL41:
 266              	.L31:
 220:u8g2/csrc/u8x8_d_st7920.c ****       break;
 267              		.loc 1 220 0
 268 000c 0249     		ldr	r1, .L32
 269              	.LVL42:
 270 000e FFF7FEFF 		bl	u8x8_d_helper_display_setup_memory
 271              	.LVL43:
 225:u8g2/csrc/u8x8_d_st7920.c **** }
 272              		.loc 1 225 0
 273 0012 0120     		movs	r0, #1
 274 0014 F9E7     		b	.L28
 275              	.L33:
 276 0016 00BF     		.align	2
 277              	.L32:
 278 0018 00000000 		.word	.LANCHOR4
 279              		.cfi_endproc
 280              	.LFE2:
 282              		.section	.rodata.u8x8_d_st7920_init_seq,"a",%progbits
 283              		.align	2
 284              		.set	.LANCHOR0,. + 0
 287              	u8x8_d_st7920_init_seq:
 288 0000 FE       		.byte	-2
 289 0001 64       		.byte	100
 290 0002 18       		.byte	24
 291 0003 FE       		.byte	-2
 292 0004 0A       		.byte	10
 293 0005 15       		.byte	21
 294 0006 38       		.byte	56
 295 0007 15       		.byte	21
 296 0008 08       		.byte	8
 297 0009 15       		.byte	21
 298 000a 06       		.byte	6
 299 000b 15       		.byte	21
 300 000c 02       		.byte	2
 301 000d 15       		.byte	21
 302 000e 01       		.byte	1
 303 000f FE       		.byte	-2
 304 0010 04       		.byte	4
 305 0011 19       		.byte	25
 306 0012 FF       		.byte	-1
 307              		.section	.rodata.u8x8_d_st7920_powersave0_seq,"a",%progbits
 308              		.align	2
 309              		.set	.LANCHOR1,. + 0
 312              	u8x8_d_st7920_powersave0_seq:
 313 0000 18       		.byte	24
 314 0001 15       		.byte	21
 315 0002 38       		.byte	56
 316 0003 15       		.byte	21
 317 0004 0C       		.byte	12
 318 0005 19       		.byte	25
 319 0006 FF       		.byte	-1
 320              		.section	.rodata.u8x8_d_st7920_powersave1_seq,"a",%progbits
 321              		.align	2
 322              		.set	.LANCHOR2,. + 0
ARM GAS  /var/folders/rk/zpr83dd14lx588t7kb0yv2b40000gn/T//ccCoQWx7.s 			page 11


 325              	u8x8_d_st7920_powersave1_seq:
 326 0000 18       		.byte	24
 327 0001 15       		.byte	21
 328 0002 38       		.byte	56
 329 0003 15       		.byte	21
 330 0004 08       		.byte	8
 331 0005 19       		.byte	25
 332 0006 FF       		.byte	-1
 333              		.section	.rodata.u8x8_st7920_128x64_display_info,"a",%progbits
 334              		.align	2
 335              		.set	.LANCHOR4,. + 0
 338              	u8x8_st7920_128x64_display_info:
 339 0000 01       		.byte	1
 340 0001 00       		.byte	0
 341 0002 05       		.byte	5
 342 0003 05       		.byte	5
 343 0004 01       		.byte	1
 344 0005 06       		.byte	6
 345 0006 14       		.byte	20
 346 0007 8C       		.byte	-116
 347 0008 40420F00 		.word	1000000
 348 000c 03       		.byte	3
 349 000d 04       		.byte	4
 350 000e 1E       		.byte	30
 351 000f 28       		.byte	40
 352 0010 10       		.byte	16
 353 0011 08       		.byte	8
 354 0012 00       		.byte	0
 355 0013 00       		.byte	0
 356 0014 8000     		.short	128
 357 0016 4000     		.short	64
 358              		.section	.rodata.u8x8_st7920_192x32_display_info,"a",%progbits
 359              		.align	2
 360              		.set	.LANCHOR3,. + 0
 363              	u8x8_st7920_192x32_display_info:
 364 0000 01       		.byte	1
 365 0001 00       		.byte	0
 366 0002 05       		.byte	5
 367 0003 05       		.byte	5
 368 0004 01       		.byte	1
 369 0005 06       		.byte	6
 370 0006 14       		.byte	20
 371 0007 8C       		.byte	-116
 372 0008 40420F00 		.word	1000000
 373 000c 03       		.byte	3
 374 000d 04       		.byte	4
 375 000e 1E       		.byte	30
 376 000f 28       		.byte	40
 377 0010 18       		.byte	24
 378 0011 04       		.byte	4
 379 0012 00       		.byte	0
 380 0013 00       		.byte	0
 381 0014 C000     		.short	192
 382 0016 2000     		.short	32
 383              		.text
 384              	.Letext0:
 385              		.file 2 "/usr/local/gcc_arm/gcc-arm-none-eabi-7-2017-q4-major/arm-none-eabi/include/machine/_defau
ARM GAS  /var/folders/rk/zpr83dd14lx588t7kb0yv2b40000gn/T//ccCoQWx7.s 			page 12


 386              		.file 3 "/usr/local/gcc_arm/gcc-arm-none-eabi-7-2017-q4-major/arm-none-eabi/include/sys/_stdint.h"
 387              		.file 4 "u8g2/csrc/u8x8.h"
ARM GAS  /var/folders/rk/zpr83dd14lx588t7kb0yv2b40000gn/T//ccCoQWx7.s 			page 13


DEFINED SYMBOLS
                            *ABS*:0000000000000000 u8x8_d_st7920.c
/var/folders/rk/zpr83dd14lx588t7kb0yv2b40000gn/T//ccCoQWx7.s:16     .text.u8x8_d_st7920_common:0000000000000000 $t
/var/folders/rk/zpr83dd14lx588t7kb0yv2b40000gn/T//ccCoQWx7.s:23     .text.u8x8_d_st7920_common:0000000000000000 u8x8_d_st7920_common
/var/folders/rk/zpr83dd14lx588t7kb0yv2b40000gn/T//ccCoQWx7.s:184    .text.u8x8_d_st7920_common:00000000000000ac $d
/var/folders/rk/zpr83dd14lx588t7kb0yv2b40000gn/T//ccCoQWx7.s:191    .text.u8x8_d_st7920_192x32:0000000000000000 $t
/var/folders/rk/zpr83dd14lx588t7kb0yv2b40000gn/T//ccCoQWx7.s:198    .text.u8x8_d_st7920_192x32:0000000000000000 u8x8_d_st7920_192x32
/var/folders/rk/zpr83dd14lx588t7kb0yv2b40000gn/T//ccCoQWx7.s:232    .text.u8x8_d_st7920_192x32:0000000000000018 $d
/var/folders/rk/zpr83dd14lx588t7kb0yv2b40000gn/T//ccCoQWx7.s:237    .text.u8x8_d_st7920_128x64:0000000000000000 $t
/var/folders/rk/zpr83dd14lx588t7kb0yv2b40000gn/T//ccCoQWx7.s:244    .text.u8x8_d_st7920_128x64:0000000000000000 u8x8_d_st7920_128x64
/var/folders/rk/zpr83dd14lx588t7kb0yv2b40000gn/T//ccCoQWx7.s:278    .text.u8x8_d_st7920_128x64:0000000000000018 $d
/var/folders/rk/zpr83dd14lx588t7kb0yv2b40000gn/T//ccCoQWx7.s:283    .rodata.u8x8_d_st7920_init_seq:0000000000000000 $d
/var/folders/rk/zpr83dd14lx588t7kb0yv2b40000gn/T//ccCoQWx7.s:287    .rodata.u8x8_d_st7920_init_seq:0000000000000000 u8x8_d_st7920_init_seq
/var/folders/rk/zpr83dd14lx588t7kb0yv2b40000gn/T//ccCoQWx7.s:308    .rodata.u8x8_d_st7920_powersave0_seq:0000000000000000 $d
/var/folders/rk/zpr83dd14lx588t7kb0yv2b40000gn/T//ccCoQWx7.s:312    .rodata.u8x8_d_st7920_powersave0_seq:0000000000000000 u8x8_d_st7920_powersave0_seq
/var/folders/rk/zpr83dd14lx588t7kb0yv2b40000gn/T//ccCoQWx7.s:321    .rodata.u8x8_d_st7920_powersave1_seq:0000000000000000 $d
/var/folders/rk/zpr83dd14lx588t7kb0yv2b40000gn/T//ccCoQWx7.s:325    .rodata.u8x8_d_st7920_powersave1_seq:0000000000000000 u8x8_d_st7920_powersave1_seq
/var/folders/rk/zpr83dd14lx588t7kb0yv2b40000gn/T//ccCoQWx7.s:334    .rodata.u8x8_st7920_128x64_display_info:0000000000000000 $d
/var/folders/rk/zpr83dd14lx588t7kb0yv2b40000gn/T//ccCoQWx7.s:338    .rodata.u8x8_st7920_128x64_display_info:0000000000000000 u8x8_st7920_128x64_display_info
/var/folders/rk/zpr83dd14lx588t7kb0yv2b40000gn/T//ccCoQWx7.s:359    .rodata.u8x8_st7920_192x32_display_info:0000000000000000 $d
/var/folders/rk/zpr83dd14lx588t7kb0yv2b40000gn/T//ccCoQWx7.s:363    .rodata.u8x8_st7920_192x32_display_info:0000000000000000 u8x8_st7920_192x32_display_info

UNDEFINED SYMBOLS
u8x8_d_helper_display_init
u8x8_cad_SendSequence
u8x8_cad_StartTransfer
u8x8_cad_SendCmd
u8x8_cad_SendData
u8x8_cad_EndTransfer
u8x8_d_helper_display_setup_memory
