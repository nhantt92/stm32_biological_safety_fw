ARM GAS  C:\Users\behun\AppData\Local\Temp\cc52ykyM.s 			page 1


   1              		.cpu cortex-m3
   2              		.eabi_attribute 20, 1
   3              		.eabi_attribute 21, 1
   4              		.eabi_attribute 23, 3
   5              		.eabi_attribute 24, 1
   6              		.eabi_attribute 25, 1
   7              		.eabi_attribute 26, 1
   8              		.eabi_attribute 30, 1
   9              		.eabi_attribute 34, 1
  10              		.eabi_attribute 18, 4
  11              		.file	"u8g2_ll_hvline.c"
  12              		.text
  13              	.Ltext0:
  14              		.cfi_sections	.debug_frame
  15              		.section	.text.u8g2_ll_hvline_vertical_top_lsb,"ax",%progbits
  16              		.align	1
  17              		.global	u8g2_ll_hvline_vertical_top_lsb
  18              		.arch armv7-m
  19              		.syntax unified
  20              		.thumb
  21              		.thumb_func
  22              		.fpu softvfp
  24              	u8g2_ll_hvline_vertical_top_lsb:
  25              	.LVL0:
  26              	.LFB0:
  27              		.file 1 "u8g2/csrc/u8g2_ll_hvline.c"
   1:u8g2/csrc/u8g2_ll_hvline.c **** /*
   2:u8g2/csrc/u8g2_ll_hvline.c **** 
   3:u8g2/csrc/u8g2_ll_hvline.c ****   u8g2_ll_hvline.c
   4:u8g2/csrc/u8g2_ll_hvline.c ****   
   5:u8g2/csrc/u8g2_ll_hvline.c ****   low level hvline
   6:u8g2/csrc/u8g2_ll_hvline.c **** 
   7:u8g2/csrc/u8g2_ll_hvline.c ****   Universal 8bit Graphics Library (https://github.com/olikraus/u8g2/)
   8:u8g2/csrc/u8g2_ll_hvline.c **** 
   9:u8g2/csrc/u8g2_ll_hvline.c ****   Copyright (c) 2016, olikraus@gmail.com
  10:u8g2/csrc/u8g2_ll_hvline.c ****   All rights reserved.
  11:u8g2/csrc/u8g2_ll_hvline.c **** 
  12:u8g2/csrc/u8g2_ll_hvline.c ****   Redistribution and use in source and binary forms, with or without modification, 
  13:u8g2/csrc/u8g2_ll_hvline.c ****   are permitted provided that the following conditions are met:
  14:u8g2/csrc/u8g2_ll_hvline.c **** 
  15:u8g2/csrc/u8g2_ll_hvline.c ****   * Redistributions of source code must retain the above copyright notice, this list 
  16:u8g2/csrc/u8g2_ll_hvline.c ****     of conditions and the following disclaimer.
  17:u8g2/csrc/u8g2_ll_hvline.c ****     
  18:u8g2/csrc/u8g2_ll_hvline.c ****   * Redistributions in binary form must reproduce the above copyright notice, this 
  19:u8g2/csrc/u8g2_ll_hvline.c ****     list of conditions and the following disclaimer in the documentation and/or other 
  20:u8g2/csrc/u8g2_ll_hvline.c ****     materials provided with the distribution.
  21:u8g2/csrc/u8g2_ll_hvline.c **** 
  22:u8g2/csrc/u8g2_ll_hvline.c ****   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND 
  23:u8g2/csrc/u8g2_ll_hvline.c ****   CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, 
  24:u8g2/csrc/u8g2_ll_hvline.c ****   INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF 
  25:u8g2/csrc/u8g2_ll_hvline.c ****   MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE 
  26:u8g2/csrc/u8g2_ll_hvline.c ****   DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR 
  27:u8g2/csrc/u8g2_ll_hvline.c ****   CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, 
  28:u8g2/csrc/u8g2_ll_hvline.c ****   SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT 
  29:u8g2/csrc/u8g2_ll_hvline.c ****   NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; 
  30:u8g2/csrc/u8g2_ll_hvline.c ****   LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER 
  31:u8g2/csrc/u8g2_ll_hvline.c ****   CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, 
ARM GAS  C:\Users\behun\AppData\Local\Temp\cc52ykyM.s 			page 2


  32:u8g2/csrc/u8g2_ll_hvline.c ****   STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) 
  33:u8g2/csrc/u8g2_ll_hvline.c ****   ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF 
  34:u8g2/csrc/u8g2_ll_hvline.c ****   ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.  
  35:u8g2/csrc/u8g2_ll_hvline.c **** 
  36:u8g2/csrc/u8g2_ll_hvline.c **** 
  37:u8g2/csrc/u8g2_ll_hvline.c ****   *ptr |= or_mask
  38:u8g2/csrc/u8g2_ll_hvline.c ****   *ptr ^= xor_mask
  39:u8g2/csrc/u8g2_ll_hvline.c ****   
  40:u8g2/csrc/u8g2_ll_hvline.c ****   color = 0:   or_mask = 1, xor_mask = 1
  41:u8g2/csrc/u8g2_ll_hvline.c ****   color = 1:   or_mask = 1, xor_mask = 0
  42:u8g2/csrc/u8g2_ll_hvline.c ****   color = 2:   or_mask = 0, xor_mask = 1
  43:u8g2/csrc/u8g2_ll_hvline.c **** 
  44:u8g2/csrc/u8g2_ll_hvline.c ****   if ( color <= 1 )
  45:u8g2/csrc/u8g2_ll_hvline.c ****     or_mask  = mask;
  46:u8g2/csrc/u8g2_ll_hvline.c ****   if ( color != 1 )
  47:u8g2/csrc/u8g2_ll_hvline.c ****     xor_mask = mask;
  48:u8g2/csrc/u8g2_ll_hvline.c ****     
  49:u8g2/csrc/u8g2_ll_hvline.c **** */
  50:u8g2/csrc/u8g2_ll_hvline.c **** 
  51:u8g2/csrc/u8g2_ll_hvline.c **** #include "u8g2.h"
  52:u8g2/csrc/u8g2_ll_hvline.c **** #include <assert.h>
  53:u8g2/csrc/u8g2_ll_hvline.c **** 
  54:u8g2/csrc/u8g2_ll_hvline.c **** /*=================================================*/
  55:u8g2/csrc/u8g2_ll_hvline.c **** /*
  56:u8g2/csrc/u8g2_ll_hvline.c ****   u8g2_ll_hvline_vertical_top_lsb
  57:u8g2/csrc/u8g2_ll_hvline.c ****     SSD13xx
  58:u8g2/csrc/u8g2_ll_hvline.c ****     UC1701    
  59:u8g2/csrc/u8g2_ll_hvline.c **** */
  60:u8g2/csrc/u8g2_ll_hvline.c **** 
  61:u8g2/csrc/u8g2_ll_hvline.c **** 
  62:u8g2/csrc/u8g2_ll_hvline.c **** #ifdef U8G2_HVLINE_SPEED_OPTIMIZATION
  63:u8g2/csrc/u8g2_ll_hvline.c **** 
  64:u8g2/csrc/u8g2_ll_hvline.c **** /*
  65:u8g2/csrc/u8g2_ll_hvline.c ****   x,y		Upper left position of the line within the local buffer (not the display!)
  66:u8g2/csrc/u8g2_ll_hvline.c ****   len		length of the line in pixel, len must not be 0
  67:u8g2/csrc/u8g2_ll_hvline.c ****   dir		0: horizontal line (left to right)
  68:u8g2/csrc/u8g2_ll_hvline.c **** 		1: vertical line (top to bottom)
  69:u8g2/csrc/u8g2_ll_hvline.c ****   asumption: 
  70:u8g2/csrc/u8g2_ll_hvline.c ****     all clipping done
  71:u8g2/csrc/u8g2_ll_hvline.c **** */
  72:u8g2/csrc/u8g2_ll_hvline.c **** void u8g2_ll_hvline_vertical_top_lsb(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, u
  73:u8g2/csrc/u8g2_ll_hvline.c **** {
  28              		.loc 1 73 1 view -0
  29              		.cfi_startproc
  30              		@ args = 4, pretend = 0, frame = 0
  31              		@ frame_needed = 0, uses_anonymous_args = 0
  32              		@ link register save eliminated.
  33              		.loc 1 73 1 is_stmt 0 view .LVU1
  34 0000 F0B4     		push	{r4, r5, r6, r7}
  35              	.LCFI0:
  36              		.cfi_def_cfa_offset 16
  37              		.cfi_offset 4, -16
  38              		.cfi_offset 5, -12
  39              		.cfi_offset 6, -8
  40              		.cfi_offset 7, -4
  41 0002 9DF810C0 		ldrb	ip, [sp, #16]	@ zero_extendqisi2
  74:u8g2/csrc/u8g2_ll_hvline.c ****   uint16_t offset;
ARM GAS  C:\Users\behun\AppData\Local\Temp\cc52ykyM.s 			page 3


  42              		.loc 1 74 3 is_stmt 1 view .LVU2
  75:u8g2/csrc/u8g2_ll_hvline.c ****   uint8_t *ptr;
  43              		.loc 1 75 3 view .LVU3
  76:u8g2/csrc/u8g2_ll_hvline.c ****   uint8_t bit_pos, mask;
  44              		.loc 1 76 3 view .LVU4
  77:u8g2/csrc/u8g2_ll_hvline.c ****   uint8_t or_mask, xor_mask;
  45              		.loc 1 77 3 view .LVU5
  78:u8g2/csrc/u8g2_ll_hvline.c **** 
  79:u8g2/csrc/u8g2_ll_hvline.c ****   //assert(x >= u8g2->buf_x0);
  80:u8g2/csrc/u8g2_ll_hvline.c ****   //assert(x < u8g2_GetU8x8(u8g2)->display_info->tile_width*8);
  81:u8g2/csrc/u8g2_ll_hvline.c ****   //assert(y >= u8g2->buf_y0);
  82:u8g2/csrc/u8g2_ll_hvline.c ****   //assert(y < u8g2_GetU8x8(u8g2)->display_info->tile_height*8);
  83:u8g2/csrc/u8g2_ll_hvline.c ****   
  84:u8g2/csrc/u8g2_ll_hvline.c ****   /* bytes are vertical, lsb on top (y=0), msb at bottom (y=7) */
  85:u8g2/csrc/u8g2_ll_hvline.c ****   bit_pos = y;		/* overflow truncate is ok here... */
  46              		.loc 1 85 3 view .LVU6
  47              	.LVL1:
  86:u8g2/csrc/u8g2_ll_hvline.c ****   bit_pos &= 7; 	/* ... because only the lowest 3 bits are needed */
  48              		.loc 1 86 3 view .LVU7
  49              		.loc 1 86 11 is_stmt 0 view .LVU8
  50 0006 02F00705 		and	r5, r2, #7
  51              	.LVL2:
  87:u8g2/csrc/u8g2_ll_hvline.c ****   mask = 1;
  52              		.loc 1 87 3 is_stmt 1 view .LVU9
  88:u8g2/csrc/u8g2_ll_hvline.c ****   mask <<= bit_pos;
  53              		.loc 1 88 3 view .LVU10
  54              		.loc 1 88 8 is_stmt 0 view .LVU11
  55 000a 0124     		movs	r4, #1
  56 000c AC40     		lsls	r4, r4, r5
  57 000e E4B2     		uxtb	r4, r4
  58              	.LVL3:
  89:u8g2/csrc/u8g2_ll_hvline.c **** 
  90:u8g2/csrc/u8g2_ll_hvline.c ****   or_mask = 0;
  59              		.loc 1 90 3 is_stmt 1 view .LVU12
  91:u8g2/csrc/u8g2_ll_hvline.c ****   xor_mask = 0;
  60              		.loc 1 91 3 view .LVU13
  92:u8g2/csrc/u8g2_ll_hvline.c ****   if ( u8g2->draw_color <= 1 )
  61              		.loc 1 92 3 view .LVU14
  62              		.loc 1 92 12 is_stmt 0 view .LVU15
  63 0010 90F87D70 		ldrb	r7, [r0, #125]	@ zero_extendqisi2
  64              		.loc 1 92 6 view .LVU16
  65 0014 012F     		cmp	r7, #1
  66 0016 19D9     		bls	.L10
  90:u8g2/csrc/u8g2_ll_hvline.c ****   xor_mask = 0;
  67              		.loc 1 90 11 view .LVU17
  68 0018 0026     		movs	r6, #0
  69              	.L2:
  70              	.LVL4:
  93:u8g2/csrc/u8g2_ll_hvline.c ****     or_mask  = mask;
  94:u8g2/csrc/u8g2_ll_hvline.c ****   if ( u8g2->draw_color != 1 )
  71              		.loc 1 94 3 is_stmt 1 view .LVU18
  72              		.loc 1 94 6 is_stmt 0 view .LVU19
  73 001a 012F     		cmp	r7, #1
  74 001c 18D0     		beq	.L14
  75              	.LVL5:
  76              	.L3:
  95:u8g2/csrc/u8g2_ll_hvline.c ****     xor_mask = mask;
ARM GAS  C:\Users\behun\AppData\Local\Temp\cc52ykyM.s 			page 4


  96:u8g2/csrc/u8g2_ll_hvline.c **** 
  97:u8g2/csrc/u8g2_ll_hvline.c **** 
  98:u8g2/csrc/u8g2_ll_hvline.c ****   offset = y;		/* y might be 8 or 16 bit, but we need 16 bit, so use a 16 bit variable */
  77              		.loc 1 98 3 is_stmt 1 view .LVU20
  99:u8g2/csrc/u8g2_ll_hvline.c ****   offset &= ~7;
  78              		.loc 1 99 3 view .LVU21
  79              		.loc 1 99 10 is_stmt 0 view .LVU22
  80 001e 02F0F802 		and	r2, r2, #248
  81              	.LVL6:
 100:u8g2/csrc/u8g2_ll_hvline.c ****   offset *= u8g2_GetU8x8(u8g2)->display_info->tile_width;
  82              		.loc 1 100 3 is_stmt 1 view .LVU23
  83              		.loc 1 100 45 is_stmt 0 view .LVU24
  84 0022 0768     		ldr	r7, [r0]
  85 0024 3F7C     		ldrb	r7, [r7, #16]	@ zero_extendqisi2
  86              	.LVL7:
 101:u8g2/csrc/u8g2_ll_hvline.c ****   ptr = u8g2->tile_buf_ptr;
  87              		.loc 1 101 3 is_stmt 1 view .LVU25
 102:u8g2/csrc/u8g2_ll_hvline.c ****   ptr += offset;
  88              		.loc 1 102 3 view .LVU26
 103:u8g2/csrc/u8g2_ll_hvline.c ****   ptr += x;
  89              		.loc 1 103 3 view .LVU27
  90              		.loc 1 103 7 is_stmt 0 view .LVU28
  91 0026 02FB0712 		mla	r2, r2, r7, r1
  92              	.LVL8:
  93              		.loc 1 103 7 view .LVU29
  94 002a 416B     		ldr	r1, [r0, #52]
  95              	.LVL9:
  96              		.loc 1 103 7 view .LVU30
  97 002c 1144     		add	r1, r1, r2
  98              	.LVL10:
 104:u8g2/csrc/u8g2_ll_hvline.c ****   
 105:u8g2/csrc/u8g2_ll_hvline.c ****   if ( dir == 0 )
  99              		.loc 1 105 3 is_stmt 1 view .LVU31
 100              		.loc 1 105 6 is_stmt 0 view .LVU32
 101 002e BCF1000F 		cmp	ip, #0
 102 0032 17D1     		bne	.L4
 103              	.LVL11:
 104              	.L5:
 106:u8g2/csrc/u8g2_ll_hvline.c ****   {
 107:u8g2/csrc/u8g2_ll_hvline.c ****       do
 105              		.loc 1 107 7 is_stmt 1 discriminator 1 view .LVU33
 108:u8g2/csrc/u8g2_ll_hvline.c ****       {
 109:u8g2/csrc/u8g2_ll_hvline.c **** 	*ptr |= or_mask;
 106              		.loc 1 109 2 discriminator 1 view .LVU34
 107              		.loc 1 109 7 is_stmt 0 discriminator 1 view .LVU35
 108 0034 0A78     		ldrb	r2, [r1]	@ zero_extendqisi2
 109 0036 3243     		orrs	r2, r2, r6
 110 0038 D2B2     		uxtb	r2, r2
 110:u8g2/csrc/u8g2_ll_hvline.c **** 	*ptr ^= xor_mask;
 111              		.loc 1 110 2 is_stmt 1 discriminator 1 view .LVU36
 112              		.loc 1 110 7 is_stmt 0 discriminator 1 view .LVU37
 113 003a 6240     		eors	r2, r2, r4
 114 003c 01F8012B 		strb	r2, [r1], #1
 115              	.LVL12:
 111:u8g2/csrc/u8g2_ll_hvline.c **** 	ptr++;
 116              		.loc 1 111 2 is_stmt 1 discriminator 1 view .LVU38
 112:u8g2/csrc/u8g2_ll_hvline.c **** 	len--;
ARM GAS  C:\Users\behun\AppData\Local\Temp\cc52ykyM.s 			page 5


 117              		.loc 1 112 2 discriminator 1 view .LVU39
 118              		.loc 1 112 5 is_stmt 0 discriminator 1 view .LVU40
 119 0040 013B     		subs	r3, r3, #1
 120              	.LVL13:
 113:u8g2/csrc/u8g2_ll_hvline.c ****       } while( len != 0 );
 121              		.loc 1 113 7 discriminator 1 view .LVU41
 122 0042 13F0FF03 		ands	r3, r3, #255
 123              	.LVL14:
 124              		.loc 1 113 7 discriminator 1 view .LVU42
 125 0046 F5D1     		bne	.L5
 126              	.LVL15:
 127              	.L1:
 114:u8g2/csrc/u8g2_ll_hvline.c ****   }
 115:u8g2/csrc/u8g2_ll_hvline.c ****   else
 116:u8g2/csrc/u8g2_ll_hvline.c ****   {    
 117:u8g2/csrc/u8g2_ll_hvline.c ****     do
 118:u8g2/csrc/u8g2_ll_hvline.c ****     {
 119:u8g2/csrc/u8g2_ll_hvline.c ****       *ptr |= or_mask;
 120:u8g2/csrc/u8g2_ll_hvline.c ****       *ptr ^= xor_mask;
 121:u8g2/csrc/u8g2_ll_hvline.c ****       
 122:u8g2/csrc/u8g2_ll_hvline.c ****       bit_pos++;
 123:u8g2/csrc/u8g2_ll_hvline.c ****       bit_pos &= 7;
 124:u8g2/csrc/u8g2_ll_hvline.c **** 
 125:u8g2/csrc/u8g2_ll_hvline.c ****       len--;
 126:u8g2/csrc/u8g2_ll_hvline.c **** 
 127:u8g2/csrc/u8g2_ll_hvline.c ****       if ( bit_pos == 0 )
 128:u8g2/csrc/u8g2_ll_hvline.c ****       {
 129:u8g2/csrc/u8g2_ll_hvline.c **** 	ptr+=u8g2->pixel_buf_width;	/* 6 Jan 17: Changed u8g2->width to u8g2->pixel_buf_width, issue #148 
 130:u8g2/csrc/u8g2_ll_hvline.c **** 		
 131:u8g2/csrc/u8g2_ll_hvline.c **** 	if ( u8g2->draw_color <= 1 )
 132:u8g2/csrc/u8g2_ll_hvline.c **** 	  or_mask  = 1;
 133:u8g2/csrc/u8g2_ll_hvline.c **** 	if ( u8g2->draw_color != 1 )
 134:u8g2/csrc/u8g2_ll_hvline.c **** 	  xor_mask = 1;
 135:u8g2/csrc/u8g2_ll_hvline.c ****       }
 136:u8g2/csrc/u8g2_ll_hvline.c ****       else
 137:u8g2/csrc/u8g2_ll_hvline.c ****       {
 138:u8g2/csrc/u8g2_ll_hvline.c **** 	or_mask <<= 1;
 139:u8g2/csrc/u8g2_ll_hvline.c **** 	xor_mask <<= 1;
 140:u8g2/csrc/u8g2_ll_hvline.c ****       }
 141:u8g2/csrc/u8g2_ll_hvline.c ****     } while( len != 0 );
 142:u8g2/csrc/u8g2_ll_hvline.c ****   }
 143:u8g2/csrc/u8g2_ll_hvline.c **** }
 128              		.loc 1 143 1 view .LVU43
 129 0048 F0BC     		pop	{r4, r5, r6, r7}
 130              	.LCFI1:
 131              		.cfi_remember_state
 132              		.cfi_restore 7
 133              		.cfi_restore 6
 134              		.cfi_restore 5
 135              		.cfi_restore 4
 136              		.cfi_def_cfa_offset 0
 137              	.LVL16:
 138              		.loc 1 143 1 view .LVU44
 139 004a 7047     		bx	lr
 140              	.LVL17:
 141              	.L10:
 142              	.LCFI2:
ARM GAS  C:\Users\behun\AppData\Local\Temp\cc52ykyM.s 			page 6


 143              		.cfi_restore_state
  93:u8g2/csrc/u8g2_ll_hvline.c ****   if ( u8g2->draw_color != 1 )
 144              		.loc 1 93 14 view .LVU45
 145 004c 2646     		mov	r6, r4
 146 004e E4E7     		b	.L2
 147              	.LVL18:
 148              	.L14:
  91:u8g2/csrc/u8g2_ll_hvline.c ****   if ( u8g2->draw_color <= 1 )
 149              		.loc 1 91 12 view .LVU46
 150 0050 0024     		movs	r4, #0
 151              	.LVL19:
  91:u8g2/csrc/u8g2_ll_hvline.c ****   if ( u8g2->draw_color <= 1 )
 152              		.loc 1 91 12 view .LVU47
 153 0052 E4E7     		b	.L3
 154              	.LVL20:
 155              	.L15:
 132:u8g2/csrc/u8g2_ll_hvline.c **** 	if ( u8g2->draw_color != 1 )
 156              		.loc 1 132 13 view .LVU48
 157 0054 0126     		movs	r6, #1
 158              	.LVL21:
 132:u8g2/csrc/u8g2_ll_hvline.c **** 	if ( u8g2->draw_color != 1 )
 159              		.loc 1 132 13 view .LVU49
 160 0056 17E0     		b	.L8
 161              	.LVL22:
 162              	.L7:
 138:u8g2/csrc/u8g2_ll_hvline.c **** 	xor_mask <<= 1;
 163              		.loc 1 138 2 is_stmt 1 view .LVU50
 138:u8g2/csrc/u8g2_ll_hvline.c **** 	xor_mask <<= 1;
 164              		.loc 1 138 10 is_stmt 0 view .LVU51
 165 0058 7600     		lsls	r6, r6, #1
 166              	.LVL23:
 138:u8g2/csrc/u8g2_ll_hvline.c **** 	xor_mask <<= 1;
 167              		.loc 1 138 10 view .LVU52
 168 005a F6B2     		uxtb	r6, r6
 169              	.LVL24:
 139:u8g2/csrc/u8g2_ll_hvline.c ****       }
 170              		.loc 1 139 2 is_stmt 1 view .LVU53
 139:u8g2/csrc/u8g2_ll_hvline.c ****       }
 171              		.loc 1 139 11 is_stmt 0 view .LVU54
 172 005c 6400     		lsls	r4, r4, #1
 173              	.LVL25:
 139:u8g2/csrc/u8g2_ll_hvline.c ****       }
 174              		.loc 1 139 11 view .LVU55
 175 005e E4B2     		uxtb	r4, r4
 176              	.LVL26:
 177              	.L9:
 141:u8g2/csrc/u8g2_ll_hvline.c ****   }
 178              		.loc 1 141 5 view .LVU56
 179 0060 002B     		cmp	r3, #0
 180 0062 F1D0     		beq	.L1
 181              	.L4:
 182              	.LVL27:
 117:u8g2/csrc/u8g2_ll_hvline.c ****     {
 183              		.loc 1 117 5 is_stmt 1 view .LVU57
 119:u8g2/csrc/u8g2_ll_hvline.c ****       *ptr ^= xor_mask;
 184              		.loc 1 119 7 view .LVU58
 119:u8g2/csrc/u8g2_ll_hvline.c ****       *ptr ^= xor_mask;
ARM GAS  C:\Users\behun\AppData\Local\Temp\cc52ykyM.s 			page 7


 185              		.loc 1 119 12 is_stmt 0 view .LVU59
 186 0064 0A78     		ldrb	r2, [r1]	@ zero_extendqisi2
 187 0066 3243     		orrs	r2, r2, r6
 188 0068 D2B2     		uxtb	r2, r2
 120:u8g2/csrc/u8g2_ll_hvline.c ****       
 189              		.loc 1 120 7 is_stmt 1 view .LVU60
 120:u8g2/csrc/u8g2_ll_hvline.c ****       
 190              		.loc 1 120 12 is_stmt 0 view .LVU61
 191 006a 6240     		eors	r2, r2, r4
 192 006c 0A70     		strb	r2, [r1]
 122:u8g2/csrc/u8g2_ll_hvline.c ****       bit_pos &= 7;
 193              		.loc 1 122 7 is_stmt 1 view .LVU62
 122:u8g2/csrc/u8g2_ll_hvline.c ****       bit_pos &= 7;
 194              		.loc 1 122 14 is_stmt 0 view .LVU63
 195 006e 6A1C     		adds	r2, r5, #1
 196              	.LVL28:
 123:u8g2/csrc/u8g2_ll_hvline.c **** 
 197              		.loc 1 123 7 is_stmt 1 view .LVU64
 125:u8g2/csrc/u8g2_ll_hvline.c **** 
 198              		.loc 1 125 7 view .LVU65
 125:u8g2/csrc/u8g2_ll_hvline.c **** 
 199              		.loc 1 125 10 is_stmt 0 view .LVU66
 200 0070 013B     		subs	r3, r3, #1
 201              	.LVL29:
 125:u8g2/csrc/u8g2_ll_hvline.c **** 
 202              		.loc 1 125 10 view .LVU67
 203 0072 DBB2     		uxtb	r3, r3
 204              	.LVL30:
 127:u8g2/csrc/u8g2_ll_hvline.c ****       {
 205              		.loc 1 127 7 is_stmt 1 view .LVU68
 127:u8g2/csrc/u8g2_ll_hvline.c ****       {
 206              		.loc 1 127 10 is_stmt 0 view .LVU69
 207 0074 12F00705 		ands	r5, r2, #7
 208 0078 EED1     		bne	.L7
 129:u8g2/csrc/u8g2_ll_hvline.c **** 		
 209              		.loc 1 129 2 is_stmt 1 view .LVU70
 129:u8g2/csrc/u8g2_ll_hvline.c **** 		
 210              		.loc 1 129 11 is_stmt 0 view .LVU71
 211 007a 90F83A20 		ldrb	r2, [r0, #58]	@ zero_extendqisi2
 212              	.LVL31:
 129:u8g2/csrc/u8g2_ll_hvline.c **** 		
 213              		.loc 1 129 5 view .LVU72
 214 007e 1144     		add	r1, r1, r2
 215              	.LVL32:
 131:u8g2/csrc/u8g2_ll_hvline.c **** 	  or_mask  = 1;
 216              		.loc 1 131 2 is_stmt 1 view .LVU73
 131:u8g2/csrc/u8g2_ll_hvline.c **** 	  or_mask  = 1;
 217              		.loc 1 131 11 is_stmt 0 view .LVU74
 218 0080 90F87D20 		ldrb	r2, [r0, #125]	@ zero_extendqisi2
 131:u8g2/csrc/u8g2_ll_hvline.c **** 	  or_mask  = 1;
 219              		.loc 1 131 5 view .LVU75
 220 0084 012A     		cmp	r2, #1
 221 0086 E5D9     		bls	.L15
 222              	.LVL33:
 223              	.L8:
 133:u8g2/csrc/u8g2_ll_hvline.c **** 	  xor_mask = 1;
 224              		.loc 1 133 2 is_stmt 1 view .LVU76
ARM GAS  C:\Users\behun\AppData\Local\Temp\cc52ykyM.s 			page 8


 133:u8g2/csrc/u8g2_ll_hvline.c **** 	  xor_mask = 1;
 225              		.loc 1 133 5 is_stmt 0 view .LVU77
 226 0088 012A     		cmp	r2, #1
 227 008a E9D0     		beq	.L9
 134:u8g2/csrc/u8g2_ll_hvline.c ****       }
 228              		.loc 1 134 13 view .LVU78
 229 008c 0124     		movs	r4, #1
 230              	.LVL34:
 134:u8g2/csrc/u8g2_ll_hvline.c ****       }
 231              		.loc 1 134 13 view .LVU79
 232 008e E7E7     		b	.L9
 233              		.cfi_endproc
 234              	.LFE0:
 236              		.section	.text.u8g2_ll_hvline_horizontal_right_lsb,"ax",%progbits
 237              		.align	1
 238              		.global	u8g2_ll_hvline_horizontal_right_lsb
 239              		.syntax unified
 240              		.thumb
 241              		.thumb_func
 242              		.fpu softvfp
 244              	u8g2_ll_hvline_horizontal_right_lsb:
 245              	.LVL35:
 246              	.LFB1:
 144:u8g2/csrc/u8g2_ll_hvline.c **** 
 145:u8g2/csrc/u8g2_ll_hvline.c **** 
 146:u8g2/csrc/u8g2_ll_hvline.c **** 
 147:u8g2/csrc/u8g2_ll_hvline.c **** #else /* U8G2_HVLINE_SPEED_OPTIMIZATION */
 148:u8g2/csrc/u8g2_ll_hvline.c **** 
 149:u8g2/csrc/u8g2_ll_hvline.c **** /*
 150:u8g2/csrc/u8g2_ll_hvline.c ****   x,y position within the buffer
 151:u8g2/csrc/u8g2_ll_hvline.c **** */
 152:u8g2/csrc/u8g2_ll_hvline.c **** static void u8g2_draw_pixel_vertical_top_lsb(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y)
 153:u8g2/csrc/u8g2_ll_hvline.c **** {
 154:u8g2/csrc/u8g2_ll_hvline.c ****   uint16_t offset;
 155:u8g2/csrc/u8g2_ll_hvline.c ****   uint8_t *ptr;
 156:u8g2/csrc/u8g2_ll_hvline.c ****   uint8_t bit_pos, mask;
 157:u8g2/csrc/u8g2_ll_hvline.c ****   
 158:u8g2/csrc/u8g2_ll_hvline.c ****   //assert(x >= u8g2->buf_x0);
 159:u8g2/csrc/u8g2_ll_hvline.c ****   //assert(x < u8g2_GetU8x8(u8g2)->display_info->tile_width*8);
 160:u8g2/csrc/u8g2_ll_hvline.c ****   //assert(y >= u8g2->buf_y0);
 161:u8g2/csrc/u8g2_ll_hvline.c ****   //assert(y < u8g2_GetU8x8(u8g2)->display_info->tile_height*8);
 162:u8g2/csrc/u8g2_ll_hvline.c ****   
 163:u8g2/csrc/u8g2_ll_hvline.c ****   /* bytes are vertical, lsb on top (y=0), msb at bottom (y=7) */
 164:u8g2/csrc/u8g2_ll_hvline.c ****   bit_pos = y;		/* overflow truncate is ok here... */
 165:u8g2/csrc/u8g2_ll_hvline.c ****   bit_pos &= 7; 	/* ... because only the lowest 3 bits are needed */
 166:u8g2/csrc/u8g2_ll_hvline.c ****   mask = 1;
 167:u8g2/csrc/u8g2_ll_hvline.c ****   mask <<= bit_pos;
 168:u8g2/csrc/u8g2_ll_hvline.c **** 
 169:u8g2/csrc/u8g2_ll_hvline.c ****   offset = y;		/* y might be 8 or 16 bit, but we need 16 bit, so use a 16 bit variable */
 170:u8g2/csrc/u8g2_ll_hvline.c ****   offset &= ~7;
 171:u8g2/csrc/u8g2_ll_hvline.c ****   offset *= u8g2_GetU8x8(u8g2)->display_info->tile_width;
 172:u8g2/csrc/u8g2_ll_hvline.c ****   ptr = u8g2->tile_buf_ptr;
 173:u8g2/csrc/u8g2_ll_hvline.c ****   ptr += offset;
 174:u8g2/csrc/u8g2_ll_hvline.c ****   ptr += x;
 175:u8g2/csrc/u8g2_ll_hvline.c **** 
 176:u8g2/csrc/u8g2_ll_hvline.c **** 
 177:u8g2/csrc/u8g2_ll_hvline.c ****   if ( u8g2->draw_color <= 1 )
ARM GAS  C:\Users\behun\AppData\Local\Temp\cc52ykyM.s 			page 9


 178:u8g2/csrc/u8g2_ll_hvline.c ****     *ptr |= mask;
 179:u8g2/csrc/u8g2_ll_hvline.c ****   if ( u8g2->draw_color != 1 )
 180:u8g2/csrc/u8g2_ll_hvline.c ****     *ptr ^= mask;
 181:u8g2/csrc/u8g2_ll_hvline.c **** 
 182:u8g2/csrc/u8g2_ll_hvline.c **** }
 183:u8g2/csrc/u8g2_ll_hvline.c **** 
 184:u8g2/csrc/u8g2_ll_hvline.c **** /*
 185:u8g2/csrc/u8g2_ll_hvline.c ****   x,y		Upper left position of the line within the local buffer (not the display!)
 186:u8g2/csrc/u8g2_ll_hvline.c ****   len		length of the line in pixel, len must not be 0
 187:u8g2/csrc/u8g2_ll_hvline.c ****   dir		0: horizontal line (left to right)
 188:u8g2/csrc/u8g2_ll_hvline.c **** 		1: vertical line (top to bottom)
 189:u8g2/csrc/u8g2_ll_hvline.c ****   asumption: 
 190:u8g2/csrc/u8g2_ll_hvline.c ****     all clipping done
 191:u8g2/csrc/u8g2_ll_hvline.c **** */
 192:u8g2/csrc/u8g2_ll_hvline.c **** void u8g2_ll_hvline_vertical_top_lsb(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, u
 193:u8g2/csrc/u8g2_ll_hvline.c **** {
 194:u8g2/csrc/u8g2_ll_hvline.c ****   if ( dir == 0 )
 195:u8g2/csrc/u8g2_ll_hvline.c ****   {
 196:u8g2/csrc/u8g2_ll_hvline.c ****     do
 197:u8g2/csrc/u8g2_ll_hvline.c ****     {
 198:u8g2/csrc/u8g2_ll_hvline.c ****       u8g2_draw_pixel_vertical_top_lsb(u8g2, x, y);
 199:u8g2/csrc/u8g2_ll_hvline.c ****       x++;
 200:u8g2/csrc/u8g2_ll_hvline.c ****       len--;
 201:u8g2/csrc/u8g2_ll_hvline.c ****     } while( len != 0 );
 202:u8g2/csrc/u8g2_ll_hvline.c ****   }
 203:u8g2/csrc/u8g2_ll_hvline.c ****   else
 204:u8g2/csrc/u8g2_ll_hvline.c ****   {
 205:u8g2/csrc/u8g2_ll_hvline.c ****     do
 206:u8g2/csrc/u8g2_ll_hvline.c ****     {
 207:u8g2/csrc/u8g2_ll_hvline.c ****       u8g2_draw_pixel_vertical_top_lsb(u8g2, x, y);
 208:u8g2/csrc/u8g2_ll_hvline.c ****       y++;
 209:u8g2/csrc/u8g2_ll_hvline.c ****       len--;
 210:u8g2/csrc/u8g2_ll_hvline.c ****     } while( len != 0 );
 211:u8g2/csrc/u8g2_ll_hvline.c ****   }
 212:u8g2/csrc/u8g2_ll_hvline.c **** }
 213:u8g2/csrc/u8g2_ll_hvline.c **** 
 214:u8g2/csrc/u8g2_ll_hvline.c **** 
 215:u8g2/csrc/u8g2_ll_hvline.c **** #endif /* U8G2_HVLINE_SPEED_OPTIMIZATION */
 216:u8g2/csrc/u8g2_ll_hvline.c **** 
 217:u8g2/csrc/u8g2_ll_hvline.c **** /*=================================================*/
 218:u8g2/csrc/u8g2_ll_hvline.c **** /*
 219:u8g2/csrc/u8g2_ll_hvline.c ****   u8g2_ll_hvline_horizontal_right_lsb
 220:u8g2/csrc/u8g2_ll_hvline.c ****     ST7920
 221:u8g2/csrc/u8g2_ll_hvline.c **** */
 222:u8g2/csrc/u8g2_ll_hvline.c **** 
 223:u8g2/csrc/u8g2_ll_hvline.c **** #ifdef U8G2_HVLINE_SPEED_OPTIMIZATION
 224:u8g2/csrc/u8g2_ll_hvline.c **** 
 225:u8g2/csrc/u8g2_ll_hvline.c **** /*
 226:u8g2/csrc/u8g2_ll_hvline.c ****   x,y		Upper left position of the line within the local buffer (not the display!)
 227:u8g2/csrc/u8g2_ll_hvline.c ****   len		length of the line in pixel, len must not be 0
 228:u8g2/csrc/u8g2_ll_hvline.c ****   dir		0: horizontal line (left to right)
 229:u8g2/csrc/u8g2_ll_hvline.c **** 		1: vertical line (top to bottom)
 230:u8g2/csrc/u8g2_ll_hvline.c ****   asumption: 
 231:u8g2/csrc/u8g2_ll_hvline.c ****     all clipping done
 232:u8g2/csrc/u8g2_ll_hvline.c **** */
 233:u8g2/csrc/u8g2_ll_hvline.c **** 
 234:u8g2/csrc/u8g2_ll_hvline.c **** void u8g2_ll_hvline_horizontal_right_lsb(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t le
ARM GAS  C:\Users\behun\AppData\Local\Temp\cc52ykyM.s 			page 10


 235:u8g2/csrc/u8g2_ll_hvline.c **** {
 247              		.loc 1 235 1 is_stmt 1 view -0
 248              		.cfi_startproc
 249              		@ args = 4, pretend = 0, frame = 0
 250              		@ frame_needed = 0, uses_anonymous_args = 0
 251              		@ link register save eliminated.
 252              		.loc 1 235 1 is_stmt 0 view .LVU81
 253 0000 F0B4     		push	{r4, r5, r6, r7}
 254              	.LCFI3:
 255              		.cfi_def_cfa_offset 16
 256              		.cfi_offset 4, -16
 257              		.cfi_offset 5, -12
 258              		.cfi_offset 6, -8
 259              		.cfi_offset 7, -4
 260 0002 9DF81060 		ldrb	r6, [sp, #16]	@ zero_extendqisi2
 236:u8g2/csrc/u8g2_ll_hvline.c ****   uint16_t offset;
 261              		.loc 1 236 3 is_stmt 1 view .LVU82
 237:u8g2/csrc/u8g2_ll_hvline.c ****   uint8_t *ptr;
 262              		.loc 1 237 3 view .LVU83
 238:u8g2/csrc/u8g2_ll_hvline.c ****   uint8_t bit_pos;
 263              		.loc 1 238 3 view .LVU84
 239:u8g2/csrc/u8g2_ll_hvline.c ****   uint8_t mask;
 264              		.loc 1 239 3 view .LVU85
 240:u8g2/csrc/u8g2_ll_hvline.c ****   uint8_t tile_width = u8g2_GetU8x8(u8g2)->display_info->tile_width;
 265              		.loc 1 240 3 view .LVU86
 266              		.loc 1 240 42 is_stmt 0 view .LVU87
 267 0006 0468     		ldr	r4, [r0]
 268              		.loc 1 240 11 view .LVU88
 269 0008 257C     		ldrb	r5, [r4, #16]	@ zero_extendqisi2
 270              	.LVL36:
 241:u8g2/csrc/u8g2_ll_hvline.c **** 
 242:u8g2/csrc/u8g2_ll_hvline.c ****   bit_pos = x;		/* overflow truncate is ok here... */
 271              		.loc 1 242 3 is_stmt 1 view .LVU89
 243:u8g2/csrc/u8g2_ll_hvline.c ****   bit_pos &= 7; 	/* ... because only the lowest 3 bits are needed */
 272              		.loc 1 243 3 view .LVU90
 273              		.loc 1 243 11 is_stmt 0 view .LVU91
 274 000a 01F00707 		and	r7, r1, #7
 275              	.LVL37:
 244:u8g2/csrc/u8g2_ll_hvline.c ****   mask = 128;
 276              		.loc 1 244 3 is_stmt 1 view .LVU92
 245:u8g2/csrc/u8g2_ll_hvline.c ****   mask >>= bit_pos;
 277              		.loc 1 245 3 view .LVU93
 278              		.loc 1 245 8 is_stmt 0 view .LVU94
 279 000e 8024     		movs	r4, #128
 280 0010 3C41     		asrs	r4, r4, r7
 281 0012 E4B2     		uxtb	r4, r4
 282              	.LVL38:
 246:u8g2/csrc/u8g2_ll_hvline.c **** 
 247:u8g2/csrc/u8g2_ll_hvline.c ****   offset = y;		/* y might be 8 or 16 bit, but we need 16 bit, so use a 16 bit variable */
 283              		.loc 1 247 3 is_stmt 1 view .LVU95
 248:u8g2/csrc/u8g2_ll_hvline.c ****   offset *= tile_width;
 284              		.loc 1 248 3 view .LVU96
 249:u8g2/csrc/u8g2_ll_hvline.c ****   offset += x>>3;
 285              		.loc 1 249 3 view .LVU97
 286              		.loc 1 249 10 is_stmt 0 view .LVU98
 287 0014 C908     		lsrs	r1, r1, #3
 288              	.LVL39:
ARM GAS  C:\Users\behun\AppData\Local\Temp\cc52ykyM.s 			page 11


 289              		.loc 1 249 10 view .LVU99
 290 0016 05FB0211 		mla	r1, r5, r2, r1
 291 001a 89B2     		uxth	r1, r1
 292              	.LVL40:
 250:u8g2/csrc/u8g2_ll_hvline.c ****   ptr = u8g2->tile_buf_ptr;
 293              		.loc 1 250 3 is_stmt 1 view .LVU100
 294              		.loc 1 250 7 is_stmt 0 view .LVU101
 295 001c 426B     		ldr	r2, [r0, #52]
 296              	.LVL41:
 251:u8g2/csrc/u8g2_ll_hvline.c ****   ptr += offset;
 297              		.loc 1 251 3 is_stmt 1 view .LVU102
 298              		.loc 1 251 7 is_stmt 0 view .LVU103
 299 001e 0A44     		add	r2, r2, r1
 300              	.LVL42:
 252:u8g2/csrc/u8g2_ll_hvline.c ****   
 253:u8g2/csrc/u8g2_ll_hvline.c ****   if ( dir == 0 )
 301              		.loc 1 253 3 is_stmt 1 view .LVU104
 302              		.loc 1 253 6 is_stmt 0 view .LVU105
 303 0020 3EBB     		cbnz	r6, .L17
 304 0022 07E0     		b	.L21
 305              	.LVL43:
 306              	.L26:
 254:u8g2/csrc/u8g2_ll_hvline.c ****   {
 255:u8g2/csrc/u8g2_ll_hvline.c ****       
 256:u8g2/csrc/u8g2_ll_hvline.c ****     do
 257:u8g2/csrc/u8g2_ll_hvline.c ****     {
 258:u8g2/csrc/u8g2_ll_hvline.c **** 
 259:u8g2/csrc/u8g2_ll_hvline.c ****       if ( u8g2->draw_color <= 1 )
 260:u8g2/csrc/u8g2_ll_hvline.c **** 	*ptr |= mask;
 307              		.loc 1 260 2 is_stmt 1 view .LVU106
 308              		.loc 1 260 7 is_stmt 0 view .LVU107
 309 0024 1178     		ldrb	r1, [r2]	@ zero_extendqisi2
 310 0026 2143     		orrs	r1, r1, r4
 311 0028 1170     		strb	r1, [r2]
 312 002a 07E0     		b	.L18
 313              	.LVL44:
 314              	.L20:
 261:u8g2/csrc/u8g2_ll_hvline.c ****       if ( u8g2->draw_color != 1 )
 262:u8g2/csrc/u8g2_ll_hvline.c **** 	*ptr ^= mask;
 263:u8g2/csrc/u8g2_ll_hvline.c ****       
 264:u8g2/csrc/u8g2_ll_hvline.c ****       mask >>= 1;
 265:u8g2/csrc/u8g2_ll_hvline.c ****       if ( mask == 0 )
 266:u8g2/csrc/u8g2_ll_hvline.c ****       {
 267:u8g2/csrc/u8g2_ll_hvline.c **** 	mask = 128;
 268:u8g2/csrc/u8g2_ll_hvline.c ****         ptr++;
 269:u8g2/csrc/u8g2_ll_hvline.c ****       }
 270:u8g2/csrc/u8g2_ll_hvline.c ****       
 271:u8g2/csrc/u8g2_ll_hvline.c ****       //x++;
 272:u8g2/csrc/u8g2_ll_hvline.c ****       len--;
 315              		.loc 1 272 7 is_stmt 1 view .LVU108
 316              		.loc 1 272 10 is_stmt 0 view .LVU109
 317 002c 013B     		subs	r3, r3, #1
 318              	.LVL45:
 273:u8g2/csrc/u8g2_ll_hvline.c ****     } while( len != 0 );
 319              		.loc 1 273 5 view .LVU110
 320 002e 13F0FF03 		ands	r3, r3, #255
 321              	.LVL46:
ARM GAS  C:\Users\behun\AppData\Local\Temp\cc52ykyM.s 			page 12


 322              		.loc 1 273 5 view .LVU111
 323 0032 23D0     		beq	.L16
 324              	.L21:
 325              	.LVL47:
 256:u8g2/csrc/u8g2_ll_hvline.c ****     {
 326              		.loc 1 256 5 is_stmt 1 view .LVU112
 259:u8g2/csrc/u8g2_ll_hvline.c **** 	*ptr |= mask;
 327              		.loc 1 259 7 view .LVU113
 259:u8g2/csrc/u8g2_ll_hvline.c **** 	*ptr |= mask;
 328              		.loc 1 259 16 is_stmt 0 view .LVU114
 329 0034 90F87D10 		ldrb	r1, [r0, #125]	@ zero_extendqisi2
 259:u8g2/csrc/u8g2_ll_hvline.c **** 	*ptr |= mask;
 330              		.loc 1 259 10 view .LVU115
 331 0038 0129     		cmp	r1, #1
 332 003a F3D9     		bls	.L26
 333              	.L18:
 261:u8g2/csrc/u8g2_ll_hvline.c **** 	*ptr ^= mask;
 334              		.loc 1 261 7 is_stmt 1 view .LVU116
 261:u8g2/csrc/u8g2_ll_hvline.c **** 	*ptr ^= mask;
 335              		.loc 1 261 16 is_stmt 0 view .LVU117
 336 003c 90F87D10 		ldrb	r1, [r0, #125]	@ zero_extendqisi2
 261:u8g2/csrc/u8g2_ll_hvline.c **** 	*ptr ^= mask;
 337              		.loc 1 261 10 view .LVU118
 338 0040 0129     		cmp	r1, #1
 339 0042 02D0     		beq	.L19
 262:u8g2/csrc/u8g2_ll_hvline.c ****       
 340              		.loc 1 262 2 is_stmt 1 view .LVU119
 262:u8g2/csrc/u8g2_ll_hvline.c ****       
 341              		.loc 1 262 7 is_stmt 0 view .LVU120
 342 0044 1178     		ldrb	r1, [r2]	@ zero_extendqisi2
 343 0046 6140     		eors	r1, r1, r4
 344 0048 1170     		strb	r1, [r2]
 345              	.L19:
 264:u8g2/csrc/u8g2_ll_hvline.c ****       if ( mask == 0 )
 346              		.loc 1 264 7 is_stmt 1 view .LVU121
 347              	.LVL48:
 265:u8g2/csrc/u8g2_ll_hvline.c ****       {
 348              		.loc 1 265 7 view .LVU122
 265:u8g2/csrc/u8g2_ll_hvline.c ****       {
 349              		.loc 1 265 10 is_stmt 0 view .LVU123
 350 004a 6408     		lsrs	r4, r4, #1
 351              	.LVL49:
 265:u8g2/csrc/u8g2_ll_hvline.c ****       {
 352              		.loc 1 265 10 view .LVU124
 353 004c EED1     		bne	.L20
 267:u8g2/csrc/u8g2_ll_hvline.c ****         ptr++;
 354              		.loc 1 267 2 is_stmt 1 view .LVU125
 355              	.LVL50:
 268:u8g2/csrc/u8g2_ll_hvline.c ****       }
 356              		.loc 1 268 9 view .LVU126
 268:u8g2/csrc/u8g2_ll_hvline.c ****       }
 357              		.loc 1 268 12 is_stmt 0 view .LVU127
 358 004e 0132     		adds	r2, r2, #1
 359              	.LVL51:
 267:u8g2/csrc/u8g2_ll_hvline.c ****         ptr++;
 360              		.loc 1 267 7 view .LVU128
 361 0050 8024     		movs	r4, #128
ARM GAS  C:\Users\behun\AppData\Local\Temp\cc52ykyM.s 			page 13


 362 0052 EBE7     		b	.L20
 363              	.LVL52:
 364              	.L27:
 274:u8g2/csrc/u8g2_ll_hvline.c ****   }
 275:u8g2/csrc/u8g2_ll_hvline.c ****   else
 276:u8g2/csrc/u8g2_ll_hvline.c ****   {
 277:u8g2/csrc/u8g2_ll_hvline.c ****     do
 278:u8g2/csrc/u8g2_ll_hvline.c ****     {
 279:u8g2/csrc/u8g2_ll_hvline.c ****       if ( u8g2->draw_color <= 1 )
 280:u8g2/csrc/u8g2_ll_hvline.c **** 	*ptr |= mask;
 365              		.loc 1 280 2 is_stmt 1 view .LVU129
 366              		.loc 1 280 7 is_stmt 0 view .LVU130
 367 0054 1178     		ldrb	r1, [r2]	@ zero_extendqisi2
 368 0056 2143     		orrs	r1, r1, r4
 369 0058 1170     		strb	r1, [r2]
 370              	.L23:
 281:u8g2/csrc/u8g2_ll_hvline.c ****       if ( u8g2->draw_color != 1 )
 371              		.loc 1 281 7 is_stmt 1 view .LVU131
 372              		.loc 1 281 16 is_stmt 0 view .LVU132
 373 005a 90F87D10 		ldrb	r1, [r0, #125]	@ zero_extendqisi2
 374              		.loc 1 281 10 view .LVU133
 375 005e 0129     		cmp	r1, #1
 376 0060 02D0     		beq	.L24
 282:u8g2/csrc/u8g2_ll_hvline.c **** 	*ptr ^= mask;
 377              		.loc 1 282 2 is_stmt 1 view .LVU134
 378              		.loc 1 282 7 is_stmt 0 view .LVU135
 379 0062 1178     		ldrb	r1, [r2]	@ zero_extendqisi2
 380 0064 6140     		eors	r1, r1, r4
 381 0066 1170     		strb	r1, [r2]
 382              	.L24:
 283:u8g2/csrc/u8g2_ll_hvline.c ****       
 284:u8g2/csrc/u8g2_ll_hvline.c ****       ptr += tile_width;
 383              		.loc 1 284 7 is_stmt 1 view .LVU136
 384              		.loc 1 284 11 is_stmt 0 view .LVU137
 385 0068 2A44     		add	r2, r2, r5
 386              	.LVL53:
 285:u8g2/csrc/u8g2_ll_hvline.c ****       //y++;
 286:u8g2/csrc/u8g2_ll_hvline.c ****       len--;
 387              		.loc 1 286 7 is_stmt 1 view .LVU138
 388              		.loc 1 286 10 is_stmt 0 view .LVU139
 389 006a 013B     		subs	r3, r3, #1
 390              	.LVL54:
 287:u8g2/csrc/u8g2_ll_hvline.c ****     } while( len != 0 );
 391              		.loc 1 287 5 view .LVU140
 392 006c 13F0FF03 		ands	r3, r3, #255
 393              	.LVL55:
 394              		.loc 1 287 5 view .LVU141
 395 0070 04D0     		beq	.L16
 396              	.L17:
 397              	.LVL56:
 277:u8g2/csrc/u8g2_ll_hvline.c ****     {
 398              		.loc 1 277 5 is_stmt 1 view .LVU142
 279:u8g2/csrc/u8g2_ll_hvline.c **** 	*ptr |= mask;
 399              		.loc 1 279 7 view .LVU143
 279:u8g2/csrc/u8g2_ll_hvline.c **** 	*ptr |= mask;
 400              		.loc 1 279 16 is_stmt 0 view .LVU144
 401 0072 90F87D10 		ldrb	r1, [r0, #125]	@ zero_extendqisi2
ARM GAS  C:\Users\behun\AppData\Local\Temp\cc52ykyM.s 			page 14


 279:u8g2/csrc/u8g2_ll_hvline.c **** 	*ptr |= mask;
 402              		.loc 1 279 10 view .LVU145
 403 0076 0129     		cmp	r1, #1
 404 0078 EFD8     		bhi	.L23
 279:u8g2/csrc/u8g2_ll_hvline.c **** 	*ptr |= mask;
 405              		.loc 1 279 10 view .LVU146
 406 007a EBE7     		b	.L27
 407              	.LVL57:
 408              	.L16:
 288:u8g2/csrc/u8g2_ll_hvline.c ****   }
 289:u8g2/csrc/u8g2_ll_hvline.c **** }
 409              		.loc 1 289 1 view .LVU147
 410 007c F0BC     		pop	{r4, r5, r6, r7}
 411              	.LCFI4:
 412              		.cfi_restore 7
 413              		.cfi_restore 6
 414              		.cfi_restore 5
 415              		.cfi_restore 4
 416              		.cfi_def_cfa_offset 0
 417              	.LVL58:
 418              		.loc 1 289 1 view .LVU148
 419 007e 7047     		bx	lr
 420              		.cfi_endproc
 421              	.LFE1:
 423              		.text
 424              	.Letext0:
 425              		.file 2 "c:\\program files (x86)\\gnu tools arm embedded\\8 2019-q3-update\\arm-none-eabi\\include
 426              		.file 3 "c:\\program files (x86)\\gnu tools arm embedded\\8 2019-q3-update\\arm-none-eabi\\include
 427              		.file 4 "u8g2/csrc/u8x8.h"
 428              		.file 5 "u8g2/csrc/u8g2.h"
ARM GAS  C:\Users\behun\AppData\Local\Temp\cc52ykyM.s 			page 15


DEFINED SYMBOLS
                            *ABS*:00000000 u8g2_ll_hvline.c
C:\Users\behun\AppData\Local\Temp\cc52ykyM.s:16     .text.u8g2_ll_hvline_vertical_top_lsb:00000000 $t
C:\Users\behun\AppData\Local\Temp\cc52ykyM.s:24     .text.u8g2_ll_hvline_vertical_top_lsb:00000000 u8g2_ll_hvline_vertical_top_lsb
C:\Users\behun\AppData\Local\Temp\cc52ykyM.s:237    .text.u8g2_ll_hvline_horizontal_right_lsb:00000000 $t
C:\Users\behun\AppData\Local\Temp\cc52ykyM.s:244    .text.u8g2_ll_hvline_horizontal_right_lsb:00000000 u8g2_ll_hvline_horizontal_right_lsb

NO UNDEFINED SYMBOLS
